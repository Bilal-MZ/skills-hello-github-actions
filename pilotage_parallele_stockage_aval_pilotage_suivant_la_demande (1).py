from ctypes import *
from pathlib import Path
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize
import tqdm
from time import sleep

lib_path = r'/home/mouzounb/Bureau/parallel_ECS_stock_aval/C/parallele_ECS_Stock_aval_ert_rtw/liball.so'


from ctypes import *
lib = cdll.LoadLibrary(lib_path)   


import matplotlib as mpl
mpl.rcParams['date.autoformatter.hour'] = '%d %b %Hh'
mpl.rcParams['date.autoformatter.minute'] = '%d %b %H:%M'









 # interface pour Ã©change avec le code en C
if True:

    
    # =======
    # ARG TYPES
    # =======
    
    # -- U --
    
    lib.getU_m_ch_dir.argtypes = (POINTER(c_double), )
    lib.setU_m_ch_dir.argtypes = (POINTER(c_double), )
    
    lib.getU_m_ECS_sout.argtypes = (POINTER(c_double), )
    lib.setU_m_ECS_sout.argtypes = (POINTER(c_double), )
    
    lib.getU_m_ECS_stock.argtypes = (POINTER(c_double), )
    lib.setU_m_ECS_stock.argtypes = (POINTER(c_double), )
    
    lib.getU_m_ECS_sec.argtypes = (POINTER(c_double), )
    lib.setU_m_ECS_sec.argtypes = (POINTER(c_double), )
    
    lib.getU_m_ch_V3V.argtypes = (POINTER(c_double), )
    lib.setU_m_ch_V3V.argtypes = (POINTER(c_double), )
    
    lib.getU_m_prim.argtypes = (POINTER(c_double), )
    lib.setU_m_prim.argtypes = (POINTER(c_double), )
    
    lib.getU_T_prim_in.argtypes = (POINTER(c_double), )
    lib.setU_T_prim_in.argtypes = (POINTER(c_double), )
    
    lib.getU_T_edv.argtypes = (POINTER(c_double), )
    lib.setU_T_edv.argtypes = (POINTER(c_double), )
    
    lib.getU_m_ECS_dir.argtypes = (POINTER(c_double), )
    lib.setU_m_ECS_dir.argtypes = (POINTER(c_double), )
    
    lib.getU_m_ECS_V3V.argtypes = (POINTER(c_double), )
    lib.setU_m_ECS_V3V.argtypes = (POINTER(c_double), )
    # -- Y --
    
    lib.getY_T_sec_in.argtypes = (POINTER(c_double), )
    lib.setY_T_sec_in.argtypes = (POINTER(c_double), )
    
    lib.getY_T_out_ECS.argtypes = (POINTER(c_double), )
    lib.setY_T_out_ECS.argtypes = (POINTER(c_double), )
    
    lib.getY_T_out.argtypes = (POINTER(c_double), )
    lib.setY_T_out.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ECS_sec_out.argtypes = (POINTER(c_double), )
    lib.setY_T_ECS_sec_out.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ECS_sec_in.argtypes = (POINTER(c_double), )
    lib.setY_T_ECS_sec_in.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ECS_prim_in.argtypes = (POINTER(c_double), )
    lib.setY_T_ECS_prim_in.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ECS_prim_out.argtypes = (POINTER(c_double), )
    lib.setY_T_ECS_prim_out.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ch_out.argtypes = (POINTER(c_double), )
    lib.setY_T_ch_out.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ch_in.argtypes = (POINTER(c_double), )
    lib.setY_T_ch_in.argtypes = (POINTER(c_double), )
    
    lib.getY_T_prim_out.argtypes = (POINTER(c_double), )
    lib.setY_T_prim_out.argtypes = (POINTER(c_double), )
    
    lib.getY_T_sec_out.argtypes = (POINTER(c_double), )
    lib.setY_T_sec_out.argtypes = (POINTER(c_double), )
    
    lib.getY_T_out_emetteur.argtypes = (POINTER(c_double), )
    lib.setY_T_out_emetteur.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ECS_n.argtypes = (POINTER(c_double), )
    lib.setY_T_ECS_n.argtypes = (POINTER(c_double), )
    
    lib.getY_Q_ch.argtypes = (POINTER(c_double), )
    lib.setY_Q_ch.argtypes = (POINTER(c_double), )
    
    lib.getY_Q_ech.argtypes = (POINTER(c_double), )
    lib.setY_Q_ech.argtypes = (POINTER(c_double), )
    
    lib.getY_Q_ech_ECS.argtypes = (POINTER(c_double), )
    lib.setY_Q_ech_ECS.argtypes = (POINTER(c_double), )
    
    lib.getY_m_ECS_bouc.argtypes = (POINTER(c_double), )
    lib.setY_m_ECS_bouc.argtypes = (POINTER(c_double), )
    
    lib.getY_m_ECS.argtypes = (POINTER(c_double), )
    lib.setY_m_ECS.argtypes = (POINTER(c_double), )
    
    lib.getY_Q_aller.argtypes = (POINTER(c_double), )
    lib.setY_Q_aller.argtypes = (POINTER(c_double), )
    
    lib.getY_Q_retour.argtypes = (POINTER(c_double), )
    lib.setY_Q_retour.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ballon_out.argtypes = (POINTER(c_double), )
    lib.setY_T_ballon_out.argtypes = (POINTER(c_double), )
    
    lib.getY_T_avg.argtypes = (POINTER(c_double), )
    lib.setY_T_avg.argtypes = (POINTER(c_double), )
    
    lib.getY_T_mid.argtypes = (POINTER(c_double), )
    lib.setY_T_mid.argtypes = (POINTER(c_double), )
    
    lib.getY_T_std.argtypes = (POINTER(c_double), )
    lib.setY_T_std.argtypes = (POINTER(c_double), )
    
    lib.getY_T_half.argtypes = (POINTER(c_double), )
    lib.setY_T_half.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ECS_1.argtypes = (POINTER(c_double), )
    lib.setY_T_ECS_1.argtypes = (POINTER(c_double), )
    
    lib.getY_m_ECS_prim.argtypes = (POINTER(c_double), )
    lib.setY_m_ECS_prim.argtypes = (POINTER(c_double), )
    
    lib.getY_m_sec.argtypes = (POINTER(c_double), )
    lib.setY_m_sec.argtypes = (POINTER(c_double), )
    
    lib.getY_m_ch.argtypes = (POINTER(c_double), )
    lib.setY_m_ch.argtypes = (POINTER(c_double), )
    
    lib.getY_Q_ECS_aller.argtypes = (POINTER(c_double), )
    lib.setY_Q_ECS_aller.argtypes = (POINTER(c_double), )
    
    lib.getY_Q_ECS_retour.argtypes = (POINTER(c_double), )
    lib.setY_Q_ECS_retour.argtypes = (POINTER(c_double), )
    
    lib.getY_eff_ech.argtypes = (POINTER(c_double), )
    lib.setY_eff_ech.argtypes = (POINTER(c_double), )
    
    lib.getY_eff_ech_ECS.argtypes = (POINTER(c_double), )
    lib.setY_eff_ech_ECS.argtypes = (POINTER(c_double), )
    
    lib.getY_m_2_ree.argtypes = (POINTER(c_double), )
    lib.setY_m_2_ree.argtypes = (POINTER(c_double), )
    
    lib.getY_T_ECS_in.argtypes = (POINTER(c_double), )
    lib.setY_T_ECS_in.argtypes = (POINTER(c_double), )
    
    lib.getY_T_in_emet.argtypes = (POINTER(c_double), )
    lib.setY_T_in_emet.argtypes = (POINTER(c_double), )
    # -- P --
    
    lib.getP_Ballondestockage_D.argtypes = (POINTER(c_double), )
    lib.setP_Ballondestockage_D.argtypes = (POINTER(c_double), )
    
    lib.getP_ECSaller_D.argtypes = (POINTER(c_double), )
    lib.setP_ECSaller_D.argtypes = (POINTER(c_double), )
    
    lib.getP_ECSretour_D.argtypes = (POINTER(c_double), )
    lib.setP_ECSretour_D.argtypes = (POINTER(c_double), )
    
    lib.getP_Chauffageretour_D.argtypes = (POINTER(c_double), )
    lib.setP_Chauffageretour_D.argtypes = (POINTER(c_double), )
    
    lib.getP_Chauffagealler_D.argtypes = (POINTER(c_double), )
    lib.setP_Chauffagealler_D.argtypes = (POINTER(c_double), )
    
    lib.getP_Ballondestockage_H.argtypes = (POINTER(c_double), )
    lib.setP_Ballondestockage_H.argtypes = (POINTER(c_double), )
    
    lib.getP_ECSaller_L.argtypes = (POINTER(c_double), )
    lib.setP_ECSaller_L.argtypes = (POINTER(c_double), )
    
    lib.getP_ECSretour_L.argtypes = (POINTER(c_double), )
    lib.setP_ECSretour_L.argtypes = (POINTER(c_double), )
    
    lib.getP_Chauffageretour_L.argtypes = (POINTER(c_double), )
    lib.setP_Chauffageretour_L.argtypes = (POINTER(c_double), )
    
    lib.getP_Chauffagealler_L.argtypes = (POINTER(c_double), )
    lib.setP_Chauffagealler_L.argtypes = (POINTER(c_double), )
    
    lib.getP_Radiateurs_S.argtypes = (POINTER(c_double), )
    lib.setP_Radiateurs_S.argtypes = (POINTER(c_double), )
    
    lib.getP_EchangeurECS_S.argtypes = (POINTER(c_double), )
    lib.setP_EchangeurECS_S.argtypes = (POINTER(c_double), )
    
    lib.getP_Echangeurrseau_S.argtypes = (POINTER(c_double), )
    lib.setP_Echangeurrseau_S.argtypes = (POINTER(c_double), )
    
    lib.getP_Radiateurs_T_air.argtypes = (POINTER(c_double), )
    lib.setP_Radiateurs_T_air.argtypes = (POINTER(c_double), )
    
    lib.getP_Ballondestockage_T_amb.argtypes = (POINTER(c_double), )
    lib.setP_Ballondestockage_T_amb.argtypes = (POINTER(c_double), )
    
    lib.getP_ECSaller_T_local.argtypes = (POINTER(c_double), )
    lib.setP_ECSaller_T_local.argtypes = (POINTER(c_double), )
    
    lib.getP_ECSretour_T_local.argtypes = (POINTER(c_double), )
    lib.setP_ECSretour_T_local.argtypes = (POINTER(c_double), )
    
    lib.getP_Chauffageretour_T_local.argtypes = (POINTER(c_double), )
    lib.setP_Chauffageretour_T_local.argtypes = (POINTER(c_double), )
    
    lib.getP_Chauffagealler_T_local.argtypes = (POINTER(c_double), )
    lib.setP_Chauffagealler_T_local.argtypes = (POINTER(c_double), )
    
    lib.getP_Ballondestockage_U.argtypes = (POINTER(c_double), )
    lib.setP_Ballondestockage_U.argtypes = (POINTER(c_double), )
    
    lib.getP_Radiateurs_U.argtypes = (POINTER(c_double), )
    lib.setP_Radiateurs_U.argtypes = (POINTER(c_double), )
    
    lib.getP_EchangeurECS_U.argtypes = (POINTER(c_double), )
    lib.setP_EchangeurECS_U.argtypes = (POINTER(c_double), )
    
    lib.getP_Echangeurrseau_U.argtypes = (POINTER(c_double), )
    lib.setP_Echangeurrseau_U.argtypes = (POINTER(c_double), )
    
    lib.getP_Ballondestockage_V_min.argtypes = (POINTER(c_double), )
    lib.setP_Ballondestockage_V_min.argtypes = (POINTER(c_double), )
    
    lib.getP_Ballondestockage_V_var.argtypes = (POINTER(c_double), )
    lib.setP_Ballondestockage_V_var.argtypes = (POINTER(c_double), )
    
    lib.getP_Ballondestockage_eps.argtypes = (POINTER(c_double), )
    lib.setP_Ballondestockage_eps.argtypes = (POINTER(c_double), )
    
    lib.getP_Ballondestockage_n.argtypes = (POINTER(c_double), )
    lib.setP_Ballondestockage_n.argtypes = (POINTER(c_double), )
    
    lib.getP_Constant2_Value.argtypes = (POINTER(c_double), )
    lib.setP_Constant2_Value.argtypes = (POINTER(c_double), )
    
    lib.getP_VariableTransportDelay_MaxDelay.argtypes = (POINTER(c_double), )
    lib.setP_VariableTransportDelay_MaxDelay.argtypes = (POINTER(c_double), )
    
    lib.getP_VariableTransportDelay_InitOutp.argtypes = (POINTER(c_double), )
    lib.setP_VariableTransportDelay_InitOutp.argtypes = (POINTER(c_double), )
    
    lib.getP_seuilm_1_Value.argtypes = (POINTER(c_double), )
    lib.setP_seuilm_1_Value.argtypes = (POINTER(c_double), )
    
    lib.getP_Switch_Threshold.argtypes = (POINTER(c_double), )
    lib.setP_Switch_Threshold.argtypes = (POINTER(c_double), )
    
    lib.getP_Delay1_InitialCondition.argtypes = (POINTER(c_double), )
    lib.setP_Delay1_InitialCondition.argtypes = (POINTER(c_double), )
    
    lib.getP_Constant17_Value.argtypes = (POINTER(c_double), )
    lib.setP_Constant17_Value.argtypes = (POINTER(c_double), )
    
    lib.getP_DelayRoot2_InitialCondition.argtypes = (POINTER(c_double), )
    lib.setP_DelayRoot2_InitialCondition.argtypes = (POINTER(c_double), )
    
    lib.getP_Constant24_Value.argtypes = (POINTER(c_double), )
    lib.setP_Constant24_Value.argtypes = (POINTER(c_double), )
    
    lib.getP_Delay2_InitialCondition.argtypes = (POINTER(c_double), )
    lib.setP_Delay2_InitialCondition.argtypes = (POINTER(c_double), )
    
    lib.getP_Delay3_InitialCondition.argtypes = (POINTER(c_double), )
    lib.setP_Delay3_InitialCondition.argtypes = (POINTER(c_double), )
    
    lib.getP_Delay4_InitialCondition.argtypes = (POINTER(c_double), )
    lib.setP_Delay4_InitialCondition.argtypes = (POINTER(c_double), )
    
    lib.getP_VariableTransportDelay_MaxDel_l.argtypes = (POINTER(c_double), )
    lib.setP_VariableTransportDelay_MaxDel_l.argtypes = (POINTER(c_double), )
    
    lib.getP_VariableTransportDelay_InitOu_j.argtypes = (POINTER(c_double), )
    lib.setP_VariableTransportDelay_InitOu_j.argtypes = (POINTER(c_double), )
    
    lib.getP_Switch_Threshold_g.argtypes = (POINTER(c_double), )
    lib.setP_Switch_Threshold_g.argtypes = (POINTER(c_double), )
    
    lib.getP_Delay5_InitialCondition.argtypes = (POINTER(c_double), )
    lib.setP_Delay5_InitialCondition.argtypes = (POINTER(c_double), )
    
    lib.getP_Switch_Threshold_j.argtypes = (POINTER(c_double), )
    lib.setP_Switch_Threshold_j.argtypes = (POINTER(c_double), )
    
    lib.getP_Delay_InitialCondition.argtypes = (POINTER(c_double), )
    lib.setP_Delay_InitialCondition.argtypes = (POINTER(c_double), )
    
    lib.getP_Constant25_Value.argtypes = (POINTER(c_double), )
    lib.setP_Constant25_Value.argtypes = (POINTER(c_double), )
    
    lib.getP_Constant26_Value.argtypes = (POINTER(c_double), )
    lib.setP_Constant26_Value.argtypes = (POINTER(c_double), )
    
    lib.getP_Gain_Gain.argtypes = (POINTER(c_double), )
    lib.setP_Gain_Gain.argtypes = (POINTER(c_double), )
    
    lib.getP_Switch1_Threshold.argtypes = (POINTER(c_double), )
    lib.setP_Switch1_Threshold.argtypes = (POINTER(c_double), )
    
    lib.getP_VariableTransportDelay_MaxDel_p.argtypes = (POINTER(c_double), )
    lib.setP_VariableTransportDelay_MaxDel_p.argtypes = (POINTER(c_double), )
    
    lib.getP_VariableTransportDelay_InitOu_f.argtypes = (POINTER(c_double), )
    lib.setP_VariableTransportDelay_InitOu_f.argtypes = (POINTER(c_double), )
    
    lib.getP_Switch_Threshold_m.argtypes = (POINTER(c_double), )
    lib.setP_Switch_Threshold_m.argtypes = (POINTER(c_double), )
    
    lib.getP_Constant2_Value_c.argtypes = (POINTER(c_double), )
    lib.setP_Constant2_Value_c.argtypes = (POINTER(c_double), )
    
    lib.getP_Switch1_Threshold_e.argtypes = (POINTER(c_double), )
    lib.setP_Switch1_Threshold_e.argtypes = (POINTER(c_double), )
    
    lib.getP_Delay_InitialCondition_o.argtypes = (POINTER(c_double), )
    lib.setP_Delay_InitialCondition_o.argtypes = (POINTER(c_double), )
    
    lib.getP_VariableTransportDelay_MaxDe_p1.argtypes = (POINTER(c_double), )
    lib.setP_VariableTransportDelay_MaxDe_p1.argtypes = (POINTER(c_double), )
    
    lib.getP_VariableTransportDelay_InitOu_o.argtypes = (POINTER(c_double), )
    lib.setP_VariableTransportDelay_InitOu_o.argtypes = (POINTER(c_double), )
    
    lib.getP_Switch_Threshold_b.argtypes = (POINTER(c_double), )
    lib.setP_Switch_Threshold_b.argtypes = (POINTER(c_double), )
    
    lib.getP_DelayRoot1_InitialCondition.argtypes = (POINTER(c_double), )
    lib.setP_DelayRoot1_InitialCondition.argtypes = (POINTER(c_double), )
    
    
    # =======
    # GETTERS
    # =======
    
    # -- U --
    
    def getU_m_ch_dir():
        m_ch_dir = c_double()
        lib.getU_m_ch_dir(byref(m_ch_dir))
        return m_ch_dir.value
    
    def getU_m_ECS_sout():
        m_ECS_sout = c_double()
        lib.getU_m_ECS_sout(byref(m_ECS_sout))
        return m_ECS_sout.value
    
    def getU_m_ECS_stock():
        m_ECS_stock = c_double()
        lib.getU_m_ECS_stock(byref(m_ECS_stock))
        return m_ECS_stock.value
    
    def getU_m_ECS_sec():
        m_ECS_sec = c_double()
        lib.getU_m_ECS_sec(byref(m_ECS_sec))
        return m_ECS_sec.value
    
    def getU_m_ch_V3V():
        m_ch_V3V = c_double()
        lib.getU_m_ch_V3V(byref(m_ch_V3V))
        return m_ch_V3V.value
    
    def getU_m_prim():
        m_prim = c_double()
        lib.getU_m_prim(byref(m_prim))
        return m_prim.value
    
    def getU_T_prim_in():
        T_prim_in = c_double()
        lib.getU_T_prim_in(byref(T_prim_in))
        return T_prim_in.value
    
    def getU_T_edv():
        T_edv = c_double()
        lib.getU_T_edv(byref(T_edv))
        return T_edv.value
    
    def getU_m_ECS_dir():
        m_ECS_dir = c_double()
        lib.getU_m_ECS_dir(byref(m_ECS_dir))
        return m_ECS_dir.value
    
    def getU_m_ECS_V3V():
        m_ECS_V3V = c_double()
        lib.getU_m_ECS_V3V(byref(m_ECS_V3V))
        return m_ECS_V3V.value
    
    def getU():
        res = tuple(func() for func in [getU_m_ch_dir, getU_m_ECS_sout, getU_m_ECS_stock, getU_m_ECS_sec, getU_m_ch_V3V, getU_m_prim, getU_T_prim_in, getU_T_edv, getU_m_ECS_dir, getU_m_ECS_V3V])
        return res
    # -- Y --
    
    def getY_T_sec_in():
        T_sec_in = c_double()
        lib.getY_T_sec_in(byref(T_sec_in))
        return T_sec_in.value
    
    def getY_T_out_ECS():
        T_out_ECS = c_double()
        lib.getY_T_out_ECS(byref(T_out_ECS))
        return T_out_ECS.value
    
    def getY_T_out():
        T_out = c_double()
        lib.getY_T_out(byref(T_out))
        return T_out.value
    
    def getY_T_ECS_sec_out():
        T_ECS_sec_out = c_double()
        lib.getY_T_ECS_sec_out(byref(T_ECS_sec_out))
        return T_ECS_sec_out.value
    
    def getY_T_ECS_sec_in():
        T_ECS_sec_in = c_double()
        lib.getY_T_ECS_sec_in(byref(T_ECS_sec_in))
        return T_ECS_sec_in.value
    
    def getY_T_ECS_prim_in():
        T_ECS_prim_in = c_double()
        lib.getY_T_ECS_prim_in(byref(T_ECS_prim_in))
        return T_ECS_prim_in.value
    
    def getY_T_ECS_prim_out():
        T_ECS_prim_out = c_double()
        lib.getY_T_ECS_prim_out(byref(T_ECS_prim_out))
        return T_ECS_prim_out.value
    
    def getY_T_ch_out():
        T_ch_out = c_double()
        lib.getY_T_ch_out(byref(T_ch_out))
        return T_ch_out.value
    
    def getY_T_ch_in():
        T_ch_in = c_double()
        lib.getY_T_ch_in(byref(T_ch_in))
        return T_ch_in.value
    
    def getY_T_prim_out():
        T_prim_out = c_double()
        lib.getY_T_prim_out(byref(T_prim_out))
        return T_prim_out.value
    
    def getY_T_sec_out():
        T_sec_out = c_double()
        lib.getY_T_sec_out(byref(T_sec_out))
        return T_sec_out.value
    
    def getY_T_out_emetteur():
        T_out_emetteur = c_double()
        lib.getY_T_out_emetteur(byref(T_out_emetteur))
        return T_out_emetteur.value
    
    def getY_T_ECS_n():
        T_ECS_n = c_double()
        lib.getY_T_ECS_n(byref(T_ECS_n))
        return T_ECS_n.value
    
    def getY_Q_ch():
        Q_ch = c_double()
        lib.getY_Q_ch(byref(Q_ch))
        return Q_ch.value
    
    def getY_Q_ech():
        Q_ech = c_double()
        lib.getY_Q_ech(byref(Q_ech))
        return Q_ech.value
    
    def getY_Q_ech_ECS():
        Q_ech_ECS = c_double()
        lib.getY_Q_ech_ECS(byref(Q_ech_ECS))
        return Q_ech_ECS.value
    
    def getY_m_ECS_bouc():
        m_ECS_bouc = c_double()
        lib.getY_m_ECS_bouc(byref(m_ECS_bouc))
        return m_ECS_bouc.value
    
    def getY_m_ECS():
        m_ECS = c_double()
        lib.getY_m_ECS(byref(m_ECS))
        return m_ECS.value
    
    def getY_Q_aller():
        Q_aller = c_double()
        lib.getY_Q_aller(byref(Q_aller))
        return Q_aller.value
    
    def getY_Q_retour():
        Q_retour = c_double()
        lib.getY_Q_retour(byref(Q_retour))
        return Q_retour.value
    
    def getY_T_ballon_out():
        T_ballon_out = c_double()
        lib.getY_T_ballon_out(byref(T_ballon_out))
        return T_ballon_out.value
    
    def getY_T_avg():
        T_avg = c_double()
        lib.getY_T_avg(byref(T_avg))
        return T_avg.value
    
    def getY_T_mid():
        T_mid = c_double()
        lib.getY_T_mid(byref(T_mid))
        return T_mid.value
    
    def getY_T_std():
        T_std = c_double()
        lib.getY_T_std(byref(T_std))
        return T_std.value
    
    def getY_T_half():
        T_half = c_double()
        lib.getY_T_half(byref(T_half))
        return T_half.value
    
    def getY_T_ECS_1():
        T_ECS_1 = c_double()
        lib.getY_T_ECS_1(byref(T_ECS_1))
        return T_ECS_1.value
    
    def getY_m_ECS_prim():
        m_ECS_prim = c_double()
        lib.getY_m_ECS_prim(byref(m_ECS_prim))
        return m_ECS_prim.value
    
    def getY_m_sec():
        m_sec = c_double()
        lib.getY_m_sec(byref(m_sec))
        return m_sec.value
    
    def getY_m_ch():
        m_ch = c_double()
        lib.getY_m_ch(byref(m_ch))
        return m_ch.value
    
    def getY_Q_ECS_aller():
        Q_ECS_aller = c_double()
        lib.getY_Q_ECS_aller(byref(Q_ECS_aller))
        return Q_ECS_aller.value
    
    def getY_Q_ECS_retour():
        Q_ECS_retour = c_double()
        lib.getY_Q_ECS_retour(byref(Q_ECS_retour))
        return Q_ECS_retour.value
    
    def getY_eff_ech():
        eff_ech = c_double()
        lib.getY_eff_ech(byref(eff_ech))
        return eff_ech.value
    
    def getY_eff_ech_ECS():
        eff_ech_ECS = c_double()
        lib.getY_eff_ech_ECS(byref(eff_ech_ECS))
        return eff_ech_ECS.value
    
    def getY_m_2_ree():
        m_2_ree = c_double()
        lib.getY_m_2_ree(byref(m_2_ree))
        return m_2_ree.value
    
    def getY_T_ECS_in():
        T_ECS_in = c_double()
        lib.getY_T_ECS_in(byref(T_ECS_in))
        return T_ECS_in.value
    
    def getY_T_in_emet():
        T_in_emet = c_double()
        lib.getY_T_in_emet(byref(T_in_emet))
        return T_in_emet.value
    
    def getY():
        res = tuple(func() for func in [getY_T_sec_in, getY_T_out_ECS, getY_T_out, getY_T_ECS_sec_out, getY_T_ECS_sec_in, getY_T_ECS_prim_in, getY_T_ECS_prim_out, getY_T_ch_out, getY_T_ch_in, getY_T_prim_out, getY_T_sec_out, getY_T_out_emetteur, getY_T_ECS_n, getY_Q_ch, getY_Q_ech, getY_Q_ech_ECS, getY_m_ECS_bouc, getY_m_ECS, getY_Q_aller, getY_Q_retour, getY_T_ballon_out, getY_T_avg, getY_T_mid, getY_T_std, getY_T_half, getY_T_ECS_1, getY_m_ECS_prim, getY_m_sec, getY_m_ch, getY_Q_ECS_aller, getY_Q_ECS_retour, getY_eff_ech, getY_eff_ech_ECS, getY_m_2_ree, getY_T_ECS_in, getY_T_in_emet])
        return res
    # -- P --
    
    def getP_Ballondestockage_D():
        Ballondestockage_D = c_double()
        lib.getP_Ballondestockage_D(byref(Ballondestockage_D))
        return Ballondestockage_D.value
    
    def getP_ECSaller_D():
        ECSaller_D = c_double()
        lib.getP_ECSaller_D(byref(ECSaller_D))
        return ECSaller_D.value
    
    def getP_ECSretour_D():
        ECSretour_D = c_double()
        lib.getP_ECSretour_D(byref(ECSretour_D))
        return ECSretour_D.value
    
    def getP_Chauffageretour_D():
        Chauffageretour_D = c_double()
        lib.getP_Chauffageretour_D(byref(Chauffageretour_D))
        return Chauffageretour_D.value
    
    def getP_Chauffagealler_D():
        Chauffagealler_D = c_double()
        lib.getP_Chauffagealler_D(byref(Chauffagealler_D))
        return Chauffagealler_D.value
    
    def getP_Ballondestockage_H():
        Ballondestockage_H = c_double()
        lib.getP_Ballondestockage_H(byref(Ballondestockage_H))
        return Ballondestockage_H.value
    
    def getP_ECSaller_L():
        ECSaller_L = c_double()
        lib.getP_ECSaller_L(byref(ECSaller_L))
        return ECSaller_L.value
    
    def getP_ECSretour_L():
        ECSretour_L = c_double()
        lib.getP_ECSretour_L(byref(ECSretour_L))
        return ECSretour_L.value
    
    def getP_Chauffageretour_L():
        Chauffageretour_L = c_double()
        lib.getP_Chauffageretour_L(byref(Chauffageretour_L))
        return Chauffageretour_L.value
    
    def getP_Chauffagealler_L():
        Chauffagealler_L = c_double()
        lib.getP_Chauffagealler_L(byref(Chauffagealler_L))
        return Chauffagealler_L.value
    
    def getP_Radiateurs_S():
        Radiateurs_S = c_double()
        lib.getP_Radiateurs_S(byref(Radiateurs_S))
        return Radiateurs_S.value
    
    def getP_EchangeurECS_S():
        EchangeurECS_S = c_double()
        lib.getP_EchangeurECS_S(byref(EchangeurECS_S))
        return EchangeurECS_S.value
    
    def getP_Echangeurrseau_S():
        Echangeurrseau_S = c_double()
        lib.getP_Echangeurrseau_S(byref(Echangeurrseau_S))
        return Echangeurrseau_S.value
    
    def getP_Radiateurs_T_air():
        Radiateurs_T_air = c_double()
        lib.getP_Radiateurs_T_air(byref(Radiateurs_T_air))
        return Radiateurs_T_air.value
    
    def getP_Ballondestockage_T_amb():
        Ballondestockage_T_amb = c_double()
        lib.getP_Ballondestockage_T_amb(byref(Ballondestockage_T_amb))
        return Ballondestockage_T_amb.value
    
    def getP_ECSaller_T_local():
        ECSaller_T_local = c_double()
        lib.getP_ECSaller_T_local(byref(ECSaller_T_local))
        return ECSaller_T_local.value
    
    def getP_ECSretour_T_local():
        ECSretour_T_local = c_double()
        lib.getP_ECSretour_T_local(byref(ECSretour_T_local))
        return ECSretour_T_local.value
    
    def getP_Chauffageretour_T_local():
        Chauffageretour_T_local = c_double()
        lib.getP_Chauffageretour_T_local(byref(Chauffageretour_T_local))
        return Chauffageretour_T_local.value
    
    def getP_Chauffagealler_T_local():
        Chauffagealler_T_local = c_double()
        lib.getP_Chauffagealler_T_local(byref(Chauffagealler_T_local))
        return Chauffagealler_T_local.value
    
    def getP_Ballondestockage_U():
        Ballondestockage_U = c_double()
        lib.getP_Ballondestockage_U(byref(Ballondestockage_U))
        return Ballondestockage_U.value
    
    def getP_Radiateurs_U():
        Radiateurs_U = c_double()
        lib.getP_Radiateurs_U(byref(Radiateurs_U))
        return Radiateurs_U.value
    
    def getP_EchangeurECS_U():
        EchangeurECS_U = c_double()
        lib.getP_EchangeurECS_U(byref(EchangeurECS_U))
        return EchangeurECS_U.value
    
    def getP_Echangeurrseau_U():
        Echangeurrseau_U = c_double()
        lib.getP_Echangeurrseau_U(byref(Echangeurrseau_U))
        return Echangeurrseau_U.value
    
    def getP_Ballondestockage_V_min():
        Ballondestockage_V_min = c_double()
        lib.getP_Ballondestockage_V_min(byref(Ballondestockage_V_min))
        return Ballondestockage_V_min.value
    
    def getP_Ballondestockage_V_var():
        Ballondestockage_V_var = c_double()
        lib.getP_Ballondestockage_V_var(byref(Ballondestockage_V_var))
        return Ballondestockage_V_var.value
    
    def getP_Ballondestockage_eps():
        Ballondestockage_eps = c_double()
        lib.getP_Ballondestockage_eps(byref(Ballondestockage_eps))
        return Ballondestockage_eps.value
    
    def getP_Ballondestockage_n():
        Ballondestockage_n = c_double()
        lib.getP_Ballondestockage_n(byref(Ballondestockage_n))
        return Ballondestockage_n.value
    
    def getP_Constant2_Value():
        Constant2_Value = c_double()
        lib.getP_Constant2_Value(byref(Constant2_Value))
        return Constant2_Value.value
    
    def getP_VariableTransportDelay_MaxDelay():
        VariableTransportDelay_MaxDelay = c_double()
        lib.getP_VariableTransportDelay_MaxDelay(byref(VariableTransportDelay_MaxDelay))
        return VariableTransportDelay_MaxDelay.value
    
    def getP_VariableTransportDelay_InitOutp():
        VariableTransportDelay_InitOutp = c_double()
        lib.getP_VariableTransportDelay_InitOutp(byref(VariableTransportDelay_InitOutp))
        return VariableTransportDelay_InitOutp.value
    
    def getP_seuilm_1_Value():
        seuilm_1_Value = c_double()
        lib.getP_seuilm_1_Value(byref(seuilm_1_Value))
        return seuilm_1_Value.value
    
    def getP_Switch_Threshold():
        Switch_Threshold = c_double()
        lib.getP_Switch_Threshold(byref(Switch_Threshold))
        return Switch_Threshold.value
    
    def getP_Delay1_InitialCondition():
        Delay1_InitialCondition = c_double()
        lib.getP_Delay1_InitialCondition(byref(Delay1_InitialCondition))
        return Delay1_InitialCondition.value
    
    def getP_Constant17_Value():
        Constant17_Value = c_double()
        lib.getP_Constant17_Value(byref(Constant17_Value))
        return Constant17_Value.value
    
    def getP_DelayRoot2_InitialCondition():
        DelayRoot2_InitialCondition = c_double()
        lib.getP_DelayRoot2_InitialCondition(byref(DelayRoot2_InitialCondition))
        return DelayRoot2_InitialCondition.value
    
    def getP_Constant24_Value():
        Constant24_Value = c_double()
        lib.getP_Constant24_Value(byref(Constant24_Value))
        return Constant24_Value.value
    
    def getP_Delay2_InitialCondition():
        Delay2_InitialCondition = c_double()
        lib.getP_Delay2_InitialCondition(byref(Delay2_InitialCondition))
        return Delay2_InitialCondition.value
    
    def getP_Delay3_InitialCondition():
        Delay3_InitialCondition = c_double()
        lib.getP_Delay3_InitialCondition(byref(Delay3_InitialCondition))
        return Delay3_InitialCondition.value
    
    def getP_Delay4_InitialCondition():
        Delay4_InitialCondition = c_double()
        lib.getP_Delay4_InitialCondition(byref(Delay4_InitialCondition))
        return Delay4_InitialCondition.value
    
    def getP_VariableTransportDelay_MaxDel_l():
        VariableTransportDelay_MaxDel_l = c_double()
        lib.getP_VariableTransportDelay_MaxDel_l(byref(VariableTransportDelay_MaxDel_l))
        return VariableTransportDelay_MaxDel_l.value
    
    def getP_VariableTransportDelay_InitOu_j():
        VariableTransportDelay_InitOu_j = c_double()
        lib.getP_VariableTransportDelay_InitOu_j(byref(VariableTransportDelay_InitOu_j))
        return VariableTransportDelay_InitOu_j.value
    
    def getP_Switch_Threshold_g():
        Switch_Threshold_g = c_double()
        lib.getP_Switch_Threshold_g(byref(Switch_Threshold_g))
        return Switch_Threshold_g.value
    
    def getP_Delay5_InitialCondition():
        Delay5_InitialCondition = c_double()
        lib.getP_Delay5_InitialCondition(byref(Delay5_InitialCondition))
        return Delay5_InitialCondition.value
    
    def getP_Switch_Threshold_j():
        Switch_Threshold_j = c_double()
        lib.getP_Switch_Threshold_j(byref(Switch_Threshold_j))
        return Switch_Threshold_j.value
    
    def getP_Delay_InitialCondition():
        Delay_InitialCondition = c_double()
        lib.getP_Delay_InitialCondition(byref(Delay_InitialCondition))
        return Delay_InitialCondition.value
    
    def getP_Constant25_Value():
        Constant25_Value = c_double()
        lib.getP_Constant25_Value(byref(Constant25_Value))
        return Constant25_Value.value
    
    def getP_Constant26_Value():
        Constant26_Value = c_double()
        lib.getP_Constant26_Value(byref(Constant26_Value))
        return Constant26_Value.value
    
    def getP_Gain_Gain():
        Gain_Gain = c_double()
        lib.getP_Gain_Gain(byref(Gain_Gain))
        return Gain_Gain.value
    
    def getP_Switch1_Threshold():
        Switch1_Threshold = c_double()
        lib.getP_Switch1_Threshold(byref(Switch1_Threshold))
        return Switch1_Threshold.value
    
    def getP_VariableTransportDelay_MaxDel_p():
        VariableTransportDelay_MaxDel_p = c_double()
        lib.getP_VariableTransportDelay_MaxDel_p(byref(VariableTransportDelay_MaxDel_p))
        return VariableTransportDelay_MaxDel_p.value
    
    def getP_VariableTransportDelay_InitOu_f():
        VariableTransportDelay_InitOu_f = c_double()
        lib.getP_VariableTransportDelay_InitOu_f(byref(VariableTransportDelay_InitOu_f))
        return VariableTransportDelay_InitOu_f.value
    
    def getP_Switch_Threshold_m():
        Switch_Threshold_m = c_double()
        lib.getP_Switch_Threshold_m(byref(Switch_Threshold_m))
        return Switch_Threshold_m.value
    
    def getP_Constant2_Value_c():
        Constant2_Value_c = c_double()
        lib.getP_Constant2_Value_c(byref(Constant2_Value_c))
        return Constant2_Value_c.value
    
    def getP_Switch1_Threshold_e():
        Switch1_Threshold_e = c_double()
        lib.getP_Switch1_Threshold_e(byref(Switch1_Threshold_e))
        return Switch1_Threshold_e.value
    
    def getP_Delay_InitialCondition_o():
        Delay_InitialCondition_o = c_double()
        lib.getP_Delay_InitialCondition_o(byref(Delay_InitialCondition_o))
        return Delay_InitialCondition_o.value
    
    def getP_VariableTransportDelay_MaxDe_p1():
        VariableTransportDelay_MaxDe_p1 = c_double()
        lib.getP_VariableTransportDelay_MaxDe_p1(byref(VariableTransportDelay_MaxDe_p1))
        return VariableTransportDelay_MaxDe_p1.value
    
    def getP_VariableTransportDelay_InitOu_o():
        VariableTransportDelay_InitOu_o = c_double()
        lib.getP_VariableTransportDelay_InitOu_o(byref(VariableTransportDelay_InitOu_o))
        return VariableTransportDelay_InitOu_o.value
    
    def getP_Switch_Threshold_b():
        Switch_Threshold_b = c_double()
        lib.getP_Switch_Threshold_b(byref(Switch_Threshold_b))
        return Switch_Threshold_b.value
    
    def getP_DelayRoot1_InitialCondition():
        DelayRoot1_InitialCondition = c_double()
        lib.getP_DelayRoot1_InitialCondition(byref(DelayRoot1_InitialCondition))
        return DelayRoot1_InitialCondition.value
    
    def getP():
        res = tuple(func() for func in [getP_Ballondestockage_D, getP_ECSaller_D, getP_ECSretour_D, getP_Chauffageretour_D, getP_Chauffagealler_D, getP_Ballondestockage_H, getP_ECSaller_L, getP_ECSretour_L, getP_Chauffageretour_L, getP_Chauffagealler_L, getP_Radiateurs_S, getP_EchangeurECS_S, getP_Echangeurrseau_S, getP_Radiateurs_T_air, getP_Ballondestockage_T_amb, getP_ECSaller_T_local, getP_ECSretour_T_local, getP_Chauffageretour_T_local, getP_Chauffagealler_T_local, getP_Ballondestockage_U, getP_Radiateurs_U, getP_EchangeurECS_U, getP_Echangeurrseau_U, getP_Ballondestockage_V_min, getP_Ballondestockage_V_var, getP_Ballondestockage_eps, getP_Ballondestockage_n, getP_Constant2_Value, getP_VariableTransportDelay_MaxDelay, getP_VariableTransportDelay_InitOutp, getP_seuilm_1_Value, getP_Switch_Threshold, getP_Delay1_InitialCondition, getP_Constant17_Value, getP_DelayRoot2_InitialCondition, getP_Constant24_Value, getP_Delay2_InitialCondition, getP_Delay3_InitialCondition, getP_Delay4_InitialCondition, getP_VariableTransportDelay_MaxDel_l, getP_VariableTransportDelay_InitOu_j, getP_Switch_Threshold_g, getP_Delay5_InitialCondition, getP_Switch_Threshold_j, getP_Delay_InitialCondition, getP_Constant25_Value, getP_Constant26_Value, getP_Gain_Gain, getP_Switch1_Threshold, getP_VariableTransportDelay_MaxDel_p, getP_VariableTransportDelay_InitOu_f, getP_Switch_Threshold_m, getP_Constant2_Value_c, getP_Switch1_Threshold_e, getP_Delay_InitialCondition_o, getP_VariableTransportDelay_MaxDe_p1, getP_VariableTransportDelay_InitOu_o, getP_Switch_Threshold_b, getP_DelayRoot1_InitialCondition])
        return res
    
    
    # =======
    # SETTERS
    # =======
    
    # -- U --
    
    def setU_m_ch_dir(value):
        m_ch_dir = c_double(value)
        lib.setU_m_ch_dir(byref(m_ch_dir))
    
    def setU_m_ECS_sout(value):
        m_ECS_sout = c_double(value)
        lib.setU_m_ECS_sout(byref(m_ECS_sout))
    
    def setU_m_ECS_stock(value):
        m_ECS_stock = c_double(value)
        lib.setU_m_ECS_stock(byref(m_ECS_stock))
    
    def setU_m_ECS_sec(value):
        m_ECS_sec = c_double(value)
        lib.setU_m_ECS_sec(byref(m_ECS_sec))
    
    def setU_m_ch_V3V(value):
        m_ch_V3V = c_double(value)
        lib.setU_m_ch_V3V(byref(m_ch_V3V))
    
    def setU_m_prim(value):
        m_prim = c_double(value)
        lib.setU_m_prim(byref(m_prim))
    
    def setU_T_prim_in(value):
        T_prim_in = c_double(value)
        lib.setU_T_prim_in(byref(T_prim_in))
    
    def setU_T_edv(value):
        T_edv = c_double(value)
        lib.setU_T_edv(byref(T_edv))
    
    def setU_m_ECS_dir(value):
        m_ECS_dir = c_double(value)
        lib.setU_m_ECS_dir(byref(m_ECS_dir))
    
    def setU_m_ECS_V3V(value):
        m_ECS_V3V = c_double(value)
        lib.setU_m_ECS_V3V(byref(m_ECS_V3V))
    
    def setU(values):
        for values_, func in zip(values, [setU_m_ch_dir, setU_m_ECS_sout, setU_m_ECS_stock, setU_m_ECS_sec, setU_m_ch_V3V, setU_m_prim, setU_T_prim_in, setU_T_edv, setU_m_ECS_dir, setU_m_ECS_V3V]):
            func(values_)
    # -- Y --
    
    def setY_T_sec_in(value):
        T_sec_in = c_double(value)
        lib.setY_T_sec_in(byref(T_sec_in))
    
    def setY_T_out_ECS(value):
        T_out_ECS = c_double(value)
        lib.setY_T_out_ECS(byref(T_out_ECS))
    
    def setY_T_out(value):
        T_out = c_double(value)
        lib.setY_T_out(byref(T_out))
    
    def setY_T_ECS_sec_out(value):
        T_ECS_sec_out = c_double(value)
        lib.setY_T_ECS_sec_out(byref(T_ECS_sec_out))
    
    def setY_T_ECS_sec_in(value):
        T_ECS_sec_in = c_double(value)
        lib.setY_T_ECS_sec_in(byref(T_ECS_sec_in))
    
    def setY_T_ECS_prim_in(value):
        T_ECS_prim_in = c_double(value)
        lib.setY_T_ECS_prim_in(byref(T_ECS_prim_in))
    
    def setY_T_ECS_prim_out(value):
        T_ECS_prim_out = c_double(value)
        lib.setY_T_ECS_prim_out(byref(T_ECS_prim_out))
    
    def setY_T_ch_out(value):
        T_ch_out = c_double(value)
        lib.setY_T_ch_out(byref(T_ch_out))
    
    def setY_T_ch_in(value):
        T_ch_in = c_double(value)
        lib.setY_T_ch_in(byref(T_ch_in))
    
    def setY_T_prim_out(value):
        T_prim_out = c_double(value)
        lib.setY_T_prim_out(byref(T_prim_out))
    
    def setY_T_sec_out(value):
        T_sec_out = c_double(value)
        lib.setY_T_sec_out(byref(T_sec_out))
    
    def setY_T_out_emetteur(value):
        T_out_emetteur = c_double(value)
        lib.setY_T_out_emetteur(byref(T_out_emetteur))
    
    def setY_T_ECS_n(value):
        T_ECS_n = c_double(value)
        lib.setY_T_ECS_n(byref(T_ECS_n))
    
    def setY_Q_ch(value):
        Q_ch = c_double(value)
        lib.setY_Q_ch(byref(Q_ch))
    
    def setY_Q_ech(value):
        Q_ech = c_double(value)
        lib.setY_Q_ech(byref(Q_ech))
    
    def setY_Q_ech_ECS(value):
        Q_ech_ECS = c_double(value)
        lib.setY_Q_ech_ECS(byref(Q_ech_ECS))
    
    def setY_m_ECS_bouc(value):
        m_ECS_bouc = c_double(value)
        lib.setY_m_ECS_bouc(byref(m_ECS_bouc))
    
    def setY_m_ECS(value):
        m_ECS = c_double(value)
        lib.setY_m_ECS(byref(m_ECS))
    
    def setY_Q_aller(value):
        Q_aller = c_double(value)
        lib.setY_Q_aller(byref(Q_aller))
    
    def setY_Q_retour(value):
        Q_retour = c_double(value)
        lib.setY_Q_retour(byref(Q_retour))
    
    def setY_T_ballon_out(value):
        T_ballon_out = c_double(value)
        lib.setY_T_ballon_out(byref(T_ballon_out))
    
    def setY_T_avg(value):
        T_avg = c_double(value)
        lib.setY_T_avg(byref(T_avg))
    
    def setY_T_mid(value):
        T_mid = c_double(value)
        lib.setY_T_mid(byref(T_mid))
    
    def setY_T_std(value):
        T_std = c_double(value)
        lib.setY_T_std(byref(T_std))
    
    def setY_T_half(value):
        T_half = c_double(value)
        lib.setY_T_half(byref(T_half))
    
    def setY_T_ECS_1(value):
        T_ECS_1 = c_double(value)
        lib.setY_T_ECS_1(byref(T_ECS_1))
    
    def setY_m_ECS_prim(value):
        m_ECS_prim = c_double(value)
        lib.setY_m_ECS_prim(byref(m_ECS_prim))
    
    def setY_m_sec(value):
        m_sec = c_double(value)
        lib.setY_m_sec(byref(m_sec))
    
    def setY_m_ch(value):
        m_ch = c_double(value)
        lib.setY_m_ch(byref(m_ch))
    
    def setY_Q_ECS_aller(value):
        Q_ECS_aller = c_double(value)
        lib.setY_Q_ECS_aller(byref(Q_ECS_aller))
    
    def setY_Q_ECS_retour(value):
        Q_ECS_retour = c_double(value)
        lib.setY_Q_ECS_retour(byref(Q_ECS_retour))
    
    def setY_eff_ech(value):
        eff_ech = c_double(value)
        lib.setY_eff_ech(byref(eff_ech))
    
    def setY_eff_ech_ECS(value):
        eff_ech_ECS = c_double(value)
        lib.setY_eff_ech_ECS(byref(eff_ech_ECS))
    
    def setY_m_2_ree(value):
        m_2_ree = c_double(value)
        lib.setY_m_2_ree(byref(m_2_ree))
    
    def setY_T_ECS_in(value):
        T_ECS_in = c_double(value)
        lib.setY_T_ECS_in(byref(T_ECS_in))
    
    def setY_T_in_emet(value):
        T_in_emet = c_double(value)
        lib.setY_T_in_emet(byref(T_in_emet))
    
    def setY(values):
        for values_, func in zip(values, [setY_T_sec_in, setY_T_out_ECS, setY_T_out, setY_T_ECS_sec_out, setY_T_ECS_sec_in, setY_T_ECS_prim_in, setY_T_ECS_prim_out, setY_T_ch_out, setY_T_ch_in, setY_T_prim_out, setY_T_sec_out, setY_T_out_emetteur, setY_T_ECS_n, setY_Q_ch, setY_Q_ech, setY_Q_ech_ECS, setY_m_ECS_bouc, setY_m_ECS, setY_Q_aller, setY_Q_retour, setY_T_ballon_out, setY_T_avg, setY_T_mid, setY_T_std, setY_T_half, setY_T_ECS_1, setY_m_ECS_prim, setY_m_sec, setY_m_ch, setY_Q_ECS_aller, setY_Q_ECS_retour, setY_eff_ech, setY_eff_ech_ECS, setY_m_2_ree, setY_T_ECS_in, setY_T_in_emet]):
            func(values_)
    # -- P --
    
    def setP_Ballondestockage_D(value):
        Ballondestockage_D = c_double(value)
        lib.setP_Ballondestockage_D(byref(Ballondestockage_D))
    
    def setP_ECSaller_D(value):
        ECSaller_D = c_double(value)
        lib.setP_ECSaller_D(byref(ECSaller_D))
    
    def setP_ECSretour_D(value):
        ECSretour_D = c_double(value)
        lib.setP_ECSretour_D(byref(ECSretour_D))
    
    def setP_Chauffageretour_D(value):
        Chauffageretour_D = c_double(value)
        lib.setP_Chauffageretour_D(byref(Chauffageretour_D))
    
    def setP_Chauffagealler_D(value):
        Chauffagealler_D = c_double(value)
        lib.setP_Chauffagealler_D(byref(Chauffagealler_D))
    
    def setP_Ballondestockage_H(value):
        Ballondestockage_H = c_double(value)
        lib.setP_Ballondestockage_H(byref(Ballondestockage_H))
    
    def setP_ECSaller_L(value):
        ECSaller_L = c_double(value)
        lib.setP_ECSaller_L(byref(ECSaller_L))
    
    def setP_ECSretour_L(value):
        ECSretour_L = c_double(value)
        lib.setP_ECSretour_L(byref(ECSretour_L))
    
    def setP_Chauffageretour_L(value):
        Chauffageretour_L = c_double(value)
        lib.setP_Chauffageretour_L(byref(Chauffageretour_L))
    
    def setP_Chauffagealler_L(value):
        Chauffagealler_L = c_double(value)
        lib.setP_Chauffagealler_L(byref(Chauffagealler_L))
    
    def setP_Radiateurs_S(value):
        Radiateurs_S = c_double(value)
        lib.setP_Radiateurs_S(byref(Radiateurs_S))
    
    def setP_EchangeurECS_S(value):
        EchangeurECS_S = c_double(value)
        lib.setP_EchangeurECS_S(byref(EchangeurECS_S))
    
    def setP_Echangeurrseau_S(value):
        Echangeurrseau_S = c_double(value)
        lib.setP_Echangeurrseau_S(byref(Echangeurrseau_S))
    
    def setP_Radiateurs_T_air(value):
        Radiateurs_T_air = c_double(value)
        lib.setP_Radiateurs_T_air(byref(Radiateurs_T_air))
    
    def setP_Ballondestockage_T_amb(value):
        Ballondestockage_T_amb = c_double(value)
        lib.setP_Ballondestockage_T_amb(byref(Ballondestockage_T_amb))
    
    def setP_ECSaller_T_local(value):
        ECSaller_T_local = c_double(value)
        lib.setP_ECSaller_T_local(byref(ECSaller_T_local))
    
    def setP_ECSretour_T_local(value):
        ECSretour_T_local = c_double(value)
        lib.setP_ECSretour_T_local(byref(ECSretour_T_local))
    
    def setP_Chauffageretour_T_local(value):
        Chauffageretour_T_local = c_double(value)
        lib.setP_Chauffageretour_T_local(byref(Chauffageretour_T_local))
    
    def setP_Chauffagealler_T_local(value):
        Chauffagealler_T_local = c_double(value)
        lib.setP_Chauffagealler_T_local(byref(Chauffagealler_T_local))
    
    def setP_Ballondestockage_U(value):
        Ballondestockage_U = c_double(value)
        lib.setP_Ballondestockage_U(byref(Ballondestockage_U))
    
    def setP_Radiateurs_U(value):
        Radiateurs_U = c_double(value)
        lib.setP_Radiateurs_U(byref(Radiateurs_U))
    
    def setP_EchangeurECS_U(value):
        EchangeurECS_U = c_double(value)
        lib.setP_EchangeurECS_U(byref(EchangeurECS_U))
    
    def setP_Echangeurrseau_U(value):
        Echangeurrseau_U = c_double(value)
        lib.setP_Echangeurrseau_U(byref(Echangeurrseau_U))
    
    def setP_Ballondestockage_V_min(value):
        Ballondestockage_V_min = c_double(value)
        lib.setP_Ballondestockage_V_min(byref(Ballondestockage_V_min))
    
    def setP_Ballondestockage_V_var(value):
        Ballondestockage_V_var = c_double(value)
        lib.setP_Ballondestockage_V_var(byref(Ballondestockage_V_var))
    
    def setP_Ballondestockage_eps(value):
        Ballondestockage_eps = c_double(value)
        lib.setP_Ballondestockage_eps(byref(Ballondestockage_eps))
    
    def setP_Ballondestockage_n(value):
        Ballondestockage_n = c_double(value)
        lib.setP_Ballondestockage_n(byref(Ballondestockage_n))
    
    def setP_Constant2_Value(value):
        Constant2_Value = c_double(value)
        lib.setP_Constant2_Value(byref(Constant2_Value))
    
    def setP_VariableTransportDelay_MaxDelay(value):
        VariableTransportDelay_MaxDelay = c_double(value)
        lib.setP_VariableTransportDelay_MaxDelay(byref(VariableTransportDelay_MaxDelay))
    
    def setP_VariableTransportDelay_InitOutp(value):
        VariableTransportDelay_InitOutp = c_double(value)
        lib.setP_VariableTransportDelay_InitOutp(byref(VariableTransportDelay_InitOutp))
    
    def setP_seuilm_1_Value(value):
        seuilm_1_Value = c_double(value)
        lib.setP_seuilm_1_Value(byref(seuilm_1_Value))
    
    def setP_Switch_Threshold(value):
        Switch_Threshold = c_double(value)
        lib.setP_Switch_Threshold(byref(Switch_Threshold))
    
    def setP_Delay1_InitialCondition(value):
        Delay1_InitialCondition = c_double(value)
        lib.setP_Delay1_InitialCondition(byref(Delay1_InitialCondition))
    
    def setP_Constant17_Value(value):
        Constant17_Value = c_double(value)
        lib.setP_Constant17_Value(byref(Constant17_Value))
    
    def setP_DelayRoot2_InitialCondition(value):
        DelayRoot2_InitialCondition = c_double(value)
        lib.setP_DelayRoot2_InitialCondition(byref(DelayRoot2_InitialCondition))
    
    def setP_Constant24_Value(value):
        Constant24_Value = c_double(value)
        lib.setP_Constant24_Value(byref(Constant24_Value))
    
    def setP_Delay2_InitialCondition(value):
        Delay2_InitialCondition = c_double(value)
        lib.setP_Delay2_InitialCondition(byref(Delay2_InitialCondition))
    
    def setP_Delay3_InitialCondition(value):
        Delay3_InitialCondition = c_double(value)
        lib.setP_Delay3_InitialCondition(byref(Delay3_InitialCondition))
    
    def setP_Delay4_InitialCondition(value):
        Delay4_InitialCondition = c_double(value)
        lib.setP_Delay4_InitialCondition(byref(Delay4_InitialCondition))
    
    def setP_VariableTransportDelay_MaxDel_l(value):
        VariableTransportDelay_MaxDel_l = c_double(value)
        lib.setP_VariableTransportDelay_MaxDel_l(byref(VariableTransportDelay_MaxDel_l))
    
    def setP_VariableTransportDelay_InitOu_j(value):
        VariableTransportDelay_InitOu_j = c_double(value)
        lib.setP_VariableTransportDelay_InitOu_j(byref(VariableTransportDelay_InitOu_j))
    
    def setP_Switch_Threshold_g(value):
        Switch_Threshold_g = c_double(value)
        lib.setP_Switch_Threshold_g(byref(Switch_Threshold_g))
    
    def setP_Delay5_InitialCondition(value):
        Delay5_InitialCondition = c_double(value)
        lib.setP_Delay5_InitialCondition(byref(Delay5_InitialCondition))
    
    def setP_Switch_Threshold_j(value):
        Switch_Threshold_j = c_double(value)
        lib.setP_Switch_Threshold_j(byref(Switch_Threshold_j))
    
    def setP_Delay_InitialCondition(value):
        Delay_InitialCondition = c_double(value)
        lib.setP_Delay_InitialCondition(byref(Delay_InitialCondition))
    
    def setP_Constant25_Value(value):
        Constant25_Value = c_double(value)
        lib.setP_Constant25_Value(byref(Constant25_Value))
    
    def setP_Constant26_Value(value):
        Constant26_Value = c_double(value)
        lib.setP_Constant26_Value(byref(Constant26_Value))
    
    def setP_Gain_Gain(value):
        Gain_Gain = c_double(value)
        lib.setP_Gain_Gain(byref(Gain_Gain))
    
    def setP_Switch1_Threshold(value):
        Switch1_Threshold = c_double(value)
        lib.setP_Switch1_Threshold(byref(Switch1_Threshold))
    
    def setP_VariableTransportDelay_MaxDel_p(value):
        VariableTransportDelay_MaxDel_p = c_double(value)
        lib.setP_VariableTransportDelay_MaxDel_p(byref(VariableTransportDelay_MaxDel_p))
    
    def setP_VariableTransportDelay_InitOu_f(value):
        VariableTransportDelay_InitOu_f = c_double(value)
        lib.setP_VariableTransportDelay_InitOu_f(byref(VariableTransportDelay_InitOu_f))
    
    def setP_Switch_Threshold_m(value):
        Switch_Threshold_m = c_double(value)
        lib.setP_Switch_Threshold_m(byref(Switch_Threshold_m))
    
    def setP_Constant2_Value_c(value):
        Constant2_Value_c = c_double(value)
        lib.setP_Constant2_Value_c(byref(Constant2_Value_c))
    
    def setP_Switch1_Threshold_e(value):
        Switch1_Threshold_e = c_double(value)
        lib.setP_Switch1_Threshold_e(byref(Switch1_Threshold_e))
    
    def setP_Delay_InitialCondition_o(value):
        Delay_InitialCondition_o = c_double(value)
        lib.setP_Delay_InitialCondition_o(byref(Delay_InitialCondition_o))
    
    def setP_VariableTransportDelay_MaxDe_p1(value):
        VariableTransportDelay_MaxDe_p1 = c_double(value)
        lib.setP_VariableTransportDelay_MaxDe_p1(byref(VariableTransportDelay_MaxDe_p1))
    
    def setP_VariableTransportDelay_InitOu_o(value):
        VariableTransportDelay_InitOu_o = c_double(value)
        lib.setP_VariableTransportDelay_InitOu_o(byref(VariableTransportDelay_InitOu_o))
    
    def setP_Switch_Threshold_b(value):
        Switch_Threshold_b = c_double(value)
        lib.setP_Switch_Threshold_b(byref(Switch_Threshold_b))
    
    def setP_DelayRoot1_InitialCondition(value):
        DelayRoot1_InitialCondition = c_double(value)
        lib.setP_DelayRoot1_InitialCondition(byref(DelayRoot1_InitialCondition))
    
    def setP(values):
        for values_, func in zip(values, [setP_Ballondestockage_D, setP_ECSaller_D, setP_ECSretour_D, setP_Chauffageretour_D, setP_Chauffagealler_D, setP_Ballondestockage_H, setP_ECSaller_L, setP_ECSretour_L, setP_Chauffageretour_L, setP_Chauffagealler_L, setP_Radiateurs_S, setP_EchangeurECS_S, setP_Echangeurrseau_S, setP_Radiateurs_T_air, setP_Ballondestockage_T_amb, setP_ECSaller_T_local, setP_ECSretour_T_local, setP_Chauffageretour_T_local, setP_Chauffagealler_T_local, setP_Ballondestockage_U, setP_Radiateurs_U, setP_EchangeurECS_U, setP_Echangeurrseau_U, setP_Ballondestockage_V_min, setP_Ballondestockage_V_var, setP_Ballondestockage_eps, setP_Ballondestockage_n, setP_Constant2_Value, setP_VariableTransportDelay_MaxDelay, setP_VariableTransportDelay_InitOutp, setP_seuilm_1_Value, setP_Switch_Threshold, setP_Delay1_InitialCondition, setP_Constant17_Value, setP_DelayRoot2_InitialCondition, setP_Constant24_Value, setP_Delay2_InitialCondition, setP_Delay3_InitialCondition, setP_Delay4_InitialCondition, setP_VariableTransportDelay_MaxDel_l, setP_VariableTransportDelay_InitOu_j, setP_Switch_Threshold_g, setP_Delay5_InitialCondition, setP_Switch_Threshold_j, setP_Delay_InitialCondition, setP_Constant25_Value, setP_Constant26_Value, setP_Gain_Gain, setP_Switch1_Threshold, setP_VariableTransportDelay_MaxDel_p, setP_VariableTransportDelay_InitOu_f, setP_Switch_Threshold_m, setP_Constant2_Value_c, setP_Switch1_Threshold_e, setP_Delay_InitialCondition_o, setP_VariableTransportDelay_MaxDe_p1, setP_VariableTransportDelay_InitOu_o, setP_Switch_Threshold_b, setP_DelayRoot1_InitialCondition]):
            func(values_)
    
    
    # =======
    # MAPPERS
    # =======
    
    # -- U --
    
    mapper_U = {0: 'm_ch_dir', 1: 'm_ECS_sout', 2: 'm_ECS_stock', 3: 'm_ECS_sec', 4: 'm_ch_V3V', 5: 'm_prim', 6: 'T_prim_in', 7: 'T_edv', 8: 'm_ECS_dir', 9: 'm_ECS_V3V'}
    # -- Y --
    
    mapper_Y = {0: 'T_sec_in', 1: 'T_out_ECS', 2: 'T_out', 3: 'T_ECS_sec_out', 4: 'T_ECS_sec_in', 5: 'T_ECS_prim_in', 6: 'T_ECS_prim_out', 7: 'T_ch_out', 8: 'T_ch_in', 9: 'T_prim_out', 10: 'T_sec_out', 11: 'T_out_emetteur', 12: 'T_ECS_n', 13: 'Q_ch', 14: 'Q_ech', 15: 'Q_ech_ECS', 16: 'm_ECS_bouc', 17: 'm_ECS', 18: 'Q_aller', 19: 'Q_retour', 20: 'T_ballon_out', 21: 'T_avg', 22: 'T_mid', 23: 'T_std', 24: 'T_half', 25: 'T_ECS_1', 26: 'm_ECS_prim', 27: 'm_sec', 28: 'm_ch', 29: 'Q_ECS_aller', 30: 'Q_ECS_retour', 31: 'eff_ech', 32: 'eff_ech_ECS', 33: 'm_2_ree', 34: 'T_ECS_in', 35: 'T_in_emet'}
    # -- P --
    
    mapper_P = {0: 'Ballondestockage_D', 1: 'ECSaller_D', 2: 'ECSretour_D', 3: 'Chauffageretour_D', 4: 'Chauffagealler_D', 5: 'Ballondestockage_H', 6: 'ECSaller_L', 7: 'ECSretour_L', 8: 'Chauffageretour_L', 9: 'Chauffagealler_L', 10: 'Radiateurs_S', 11: 'EchangeurECS_S', 12: 'Echangeurrseau_S', 13: 'Radiateurs_T_air', 14: 'Ballondestockage_T_amb', 15: 'ECSaller_T_local', 16: 'ECSretour_T_local', 17: 'Chauffageretour_T_local', 18: 'Chauffagealler_T_local', 19: 'Ballondestockage_U', 20: 'Radiateurs_U', 21: 'EchangeurECS_U', 22: 'Echangeurrseau_U', 23: 'Ballondestockage_V_min', 24: 'Ballondestockage_V_var', 25: 'Ballondestockage_eps', 26: 'Ballondestockage_n', 27: 'Constant2_Value', 28: 'VariableTransportDelay_MaxDelay', 29: 'VariableTransportDelay_InitOutp', 30: 'seuilm_1_Value', 31: 'Switch_Threshold', 32: 'Delay1_InitialCondition', 33: 'Constant17_Value', 34: 'DelayRoot2_InitialCondition', 35: 'Constant24_Value', 36: 'Delay2_InitialCondition', 37: 'Delay3_InitialCondition', 38: 'Delay4_InitialCondition', 39: 'VariableTransportDelay_MaxDel_l', 40: 'VariableTransportDelay_InitOu_j', 41: 'Switch_Threshold_g', 42: 'Delay5_InitialCondition', 43: 'Switch_Threshold_j', 44: 'Delay_InitialCondition', 45: 'Constant25_Value', 46: 'Constant26_Value', 47: 'Gain_Gain', 48: 'Switch1_Threshold', 49: 'VariableTransportDelay_MaxDel_p', 50: 'VariableTransportDelay_InitOu_f', 51: 'Switch_Threshold_m', 52: 'Constant2_Value_c', 53: 'Switch1_Threshold_e', 54: 'Delay_InitialCondition_o', 55: 'VariableTransportDelay_MaxDe_p1', 56: 'VariableTransportDelay_InitOu_o', 57: 'Switch_Threshold_b', 58: 'DelayRoot1_InitialCondition'}
    

# liste des entrÃ©es, sorties et paramÃ¨tres
if True:

    pass
    # 
    # ### ENTREES
    # 
    #       voir pilotage
    # 
    # - m_ch_dir
    # - m_ECS_sout
    # - m_ECS_stock
    # - m_ECS_sec
    # - m_ch_V3V
    # - m_prim
    # - T_prim_in
    # - T_edv
    # - m_ECS_dir
    # - m_ECS_V3V
    # 
    # ### SORTIES
    # 
    #       voir pilotage
    # 
    # - T_sec_in
    # - T_out_ECS
    # - T_out
    # - T_ECS_sec_out
    # - T_ECS_sec_in
    # - T_ECS_prim_in
    # - T_ECS_prim_out
    # - T_ch_out
    # - T_ch_in
    # - T_prim_out
    # - T_sec_out
    # - T_out_emetteur
    # - T_ECS_n
    # - Q_ch
    # - Q_ech
    # - Q_ech_ECS
    # - m_ECS_bouc
    # - m_ECS
    # - Q_aller
    # - Q_retour
    # - T_ballon_out
    # - T_avg
    # - T_mid
    # - T_std
    # - T_half
    # - T_ECS_1
    # - m_ECS_prim
    # - m_sec
    # - m_ch
    # - Q_ECS_aller
    # - Q_ECS_retour
    # - eff_ech
    # - eff_ech_ECS
    # - m_2_ree
    # - T_ECS_in
    # - T_in_emet
    # 
    # ### PARAMETRES
    # 
    #       obtenir la valeur actuelle: `getP_{nom_parametre}()`
    #       changer de valeur: `setP_{nom_parametre}(valeur)`
    # 
    # - Ballondestockage_D
    # - ECSaller_D
    # - ECSretour_D
    # - Chauffageretour_D
    # - Chauffagealler_D
    # - Ballondestockage_H
    # - ECSaller_L
    # - ECSretour_L
    # - Chauffageretour_L
    # - Chauffagealler_L
    # - Radiateurs_S
    # - EchangeurECS_S
    # - Echangeurrseau_S
    # - Radiateurs_T_air
    # - Ballondestockage_T_amb
    # - ECSaller_T_local
    # - ECSretour_T_local
    # - Chauffageretour_T_local
    # - Chauffagealler_T_local
    # - Ballondestockage_U
    # - Radiateurs_U
    # - EchangeurECS_U
    # - Echangeurrseau_U
    # - Ballondestockage_V_min
    # - Ballondestockage_V_var
    # - Ballondestockage_eps
    # - Ballondestockage_n
    # - Constant2_Value
    # - VariableTransportDelay_MaxDelay
    # - VariableTransportDelay_InitOutp
    # - seuilm_1_Value
    # - Switch_Threshold
    # - Delay1_InitialCondition
    # - Constant17_Value
    # - DelayRoot2_InitialCondition
    # - Constant24_Value
    # - Delay2_InitialCondition
    # - Delay3_InitialCondition
    # - Delay4_InitialCondition
    # - VariableTransportDelay_MaxDel_l
    # - VariableTransportDelay_InitOu_j
    # - Switch_Threshold_g
    # - Delay5_InitialCondition
    # - Switch_Threshold_j
    # - Delay_InitialCondition
    # - Constant25_Value
    # - Constant26_Value
    # - Gain_Gain
    # - Switch1_Threshold
    # - VariableTransportDelay_MaxDel_p
    # - VariableTransportDelay_InitOu_f
    # - Switch_Threshold_m
    # - Constant2_Value_c
    # - Switch1_Threshold_e
    # - Delay_InitialCondition_o
    # - VariableTransportDelay_MaxDe_p1
    # - VariableTransportDelay_InitOu_o
    # - Switch_Threshold_b
    # - DelayRoot1_InitialCondition

# fonction d'initialisation pour rÃ©glage du pas de temps: Ã  appeler en tout dÃ©but de script
if True:
    lib.initialize.argtypes = (POINTER(c_int), )
    def initialize(time_step: int):
        """Initialise le modÃ¨le physique avec le pas de temps `time_step`.
    
        Parameters
        ----------
        time_step : int, secondes
    
        Notes
        -----
        Le pas de temps ne doit pas Ãªtre rÃ©gler en dehors de cette fonction
        """
        stepSize0 = c_int(time_step)
        lib.initialize(byref(stepSize0))
    


























"""
A implÃ©menter dans Simulink:
- composant stockage: modifier la prÃ©cision d'affichage du message de correction dÃ©bit trop grand
"""


def creer_loi_d_eau(*points: tuple[float, float]): # non important
    """Retourne une fonction par morceaux `func`
    
    Parameters
    -------
    points
        couples de coordonnÃ©es (x, y)

    Notes
    -----
    Pour un argument x < x_min, la fonction retourne y_min
    Pour un argument x > x_max, la fonction retourne y_max

    """
    xp = [p[0] for p in points]
    yp = [p[1] for p in points]
    assert np.all(np.diff(xp) > 0)
    points = sorted(points, key=lambda e: e[0])
    func = lambda x : np.interp(x, 
                                xp, 
                                yp) 
    return np.vectorize(func)





# donnÃ©es temporelles
time_step = 15                 # ne pas modifier le pas de temps ici: appeler la fonction "initialize"

# sorties de rÃ©fÃ©rences
P_ch_ref = pd.read_csv('donnees/batiment_1/NO.N.AB.01.Gen.ReEx.001.001_2014_2023.csv').iloc[:, 1].values # demande chauffage [kW/m2]
m_ECS_sout_ref = pd.read_csv('donnees/batiment_1/NO.AB.ts60.cat4.occ34.persday40.res1.csv').iloc[:, 1].values  # soutirage ECS [kg/s] - pdt 60s
m_ECS_sout = np.sort(m_ECS_sout_ref)
T_prim_out_ref = np.full(8760, 85)                                          # fixme: "70" donnÃ©e au Listic
T_ECS_in_ref = 60                                     
T_out_ECS_ref = 53

# conditions extÃ©rieures
df = pd.read_csv('donnees/batiment_1/TMY_Trondheim_2014_2023.csv')
T_ext =  df['temp_air'].values       # tempÃ©rature extÃ©rieure [Â°C]
I_dir =  df['dni'].values     # irradiance directe     [W/m2]
I_diff = df['dhi'].values     # irradiance diffuse     [W/m2]
T_prim_in = creer_loi_d_eau((-10, 140), (15, 100))(T_ext)     # tempÃ©rature primaire entrante (=aller) [Â°C]  
                                                              # sources: 
                                                              # - Guide des prÃ©conisations techniques du rÃ©seau de chauffage urbain de Grenoble-Alpes MÃ©tropole, page 7
                                                              # - Guide technique de conception de  sous-stations de rÃ©seaux de chaleur  et de secondaires associÃ©s optimisÃ©s, page 6

# T_prim_in est moyennÃ©e en glissant pour reflÃ©ter l'incertitude liÃ©e au temps de propagation dans le rÃ©seau: moyennÃ©e sur 4h (mais ici pas de temps horaire)
T_prim_in = pd.Series(T_prim_in).rolling(4).mean().fillna(180).values
m_prim = np.full(8760, 0.1)                                   # dÃ©bit primaire [kg/s]


def get_idx_largest_0_period(arr):
    """Determine the largest 0 period in a 1D array.

    Parameters
    ----------
    arr : np.ndarray, shape (n,)

    Returns
    -------
    (idx1, idx2)
        index of the first (resp last) element of the largest 0 period in `arr``
    """
    assert arr[0] > 0 and arr[-1] > 0  # aucune pÃ©riode nulle en dÃ©but/fin d'array
    pos_idx = np.nonzero(arr)[0]
    large_gaps_idx_idx = np.argwhere(pos_idx[1:] - pos_idx[:-1]-1)[:, 0]
    m = 0
    m_idx = 0
    for idx in large_gaps_idx_idx:
        if pos_idx[idx+1] - pos_idx[idx] > m:
            m_idx = pos_idx[idx]
            m = pos_idx[idx+1] - pos_idx[idx]

    idx1, idx2 = m_idx + 1, m_idx + m -1
    return idx1, idx2



# passage des donnÃ©es au pas de temps demandÃ©: interpolation linÃ©aire
# optionnel: suppression de la pÃ©riode hors saison de chauffe et dÃ©calage temporel pour continuitÃ©
# optionnel : sÃ©lection d'une partie seulement des donnÃ©es avec `time_share`

time_share = 0.005
assert 0 < time_share <= 1
for idx, var_name in enumerate(['P_ch_ref', 'm_ECS_sout', 'T_prim_out_ref', 'T_ext', 'I_dir', 'I_diff', 'T_prim_in', 'm_prim']):
    var_ = globals()[var_name]

    ### rÃ©Ã©chantillonage
    time_step_old = 365 * 24 * 3600 / len(var_)
    assert time_step_old - round(time_step_old) == 0, "Le pas de temps des donnÃ©es chargÃ©es n'est pas un nombre entier de secondes"
    print(f"Pas de temps actuel de {var_name} (longueur {len(var_)}): {time_step_old}")
    var_ = np.append(var_, var_[0])   # ajout de la premiÃ¨re valeur pour avoir les valeurs de fin en interpolation
    index_ = pd.date_range('01/01/2019', freq=f'{time_step_old}s', periods=len(var_))
    var_ = pd.Series(var_, index=index_).resample(f'{time_step}s').interpolate()
    var_ = var_.iloc[:-1]
    print(f"Pas de temps modifiÃ© de {var_name} (longueur {len(var_)}): {365 * 24 * 3600 / len(var_)}\n")

    ### dÃ©tection de la saison de chauffe
    if var_name == 'P_ch_ref':
        idx1, idx2 = get_idx_largest_0_period(var_.values)
        print(f"\n==> L'Ã©tÃ© commence le {var_.index[idx1].strftime('%d-%m')} \
                          et termine le {var_.index[idx2].strftime('%d-%m')} \
                          (pas de chauffage)\n")
    
    ### dÃ©calage temporel pour continuitÃ©
    # l'annÃ©e dÃ©marre en dÃ©but de saison de chauffage
    # l'annÃ©e se termine en fin de saison de chauffage
    ###
    # var_ = pd.concat([var_[idx2+1:], var_[:idx1]])   


    ### sÃ©lection d'une partie seulement de la sÃ©rie temporelle (time_share): 
    ### les 1/10 des valeurs. Si sÃ©rie rÃ©ordonnÃ©e, s'applique Ã  la sÃ©rie rÃ©ordonnÃ©e
    var_ = var_[:int(len(var_) * time_share)]

    ### enregistrement dans la variable de dÃ©part
    globals()[var_name] = var_.values

index_ = var_.index

# d'autres donnÃ©es temporelles
nbr_ts = len(index_)
t_end = nbr_ts * time_step             
time_range = np.arange(0, t_end, time_step)

# pondÃ©ration multi objectifs: pour le moment, seulement mono objectif (demande chauffage)
coefs = (1, 0, 0, 0)


def calculer_erreur_totale(idx):
    P_ch_modele = sorties[idx]['Q_ch']
    T_prim_out_ = sorties[idx]['T_prim_out']
    T_ECS_in_ = sorties[idx]['T_ECS_in']
    T_out_ECS_ = sorties[idx]['T_out_ECS']
    erreur1 = ((P_ch_modele - P_ch_ref[idx]) / (P_ch_ref[idx]+1)) ** 2 # +1 sinon risque de div par 0
    erreur2 = ((T_prim_out_ - T_prim_out_ref[idx]) / T_prim_out_ref[idx]) ** 2 
    erreur3 = ((T_ECS_in_ - T_ECS_in_ref) / T_ECS_in_ref) ** 2 
    erreur4 = ((T_out_ECS_ - T_out_ECS_ref) / T_out_ECS_ref) ** 2 
    erreur  = coefs[0] * erreur1 + coefs[1] * erreur2 + coefs[2] * erreur3 + coefs[3] * erreur4
    erreurs[idx]['erreur1'] = erreur1
    erreurs[idx]['erreur2'] = erreur2
    erreurs[idx]['erreur3'] = erreur3       # fixme: non tracÃ©e en postprocessing
    erreurs[idx]['erreur4'] = erreur4
    erreurs[idx]['erreur'] =  erreur

def executer_modele_phy(idx):
    # conversion du dictionnaire en liste, avec vÃ©rification que toutes les entrÃ©es sont prÃ©sentes
    entrees_ = [0] * len(mapper_U)
    for k in range(len(mapper_U)):
        value = entrees[idx].get(mapper_U[k])
        if value is None:
            raise ValueError(f"Pas de temps {idx}: valeur d'entrÃ©e {mapper_U[k]} manquante.")
        else:
            entrees_[k] = value
    # envoi entrÃ©es vers C 
    setU(entrees_)
    # exÃ©cution modÃ¨le physique
    lib.parallele_ECS_Stock_aval_step() 
    # rÃ©cupÃ©ration sorties              
    sorties_ = getY()
    # conversion sorties en dictionnaire et assignation dans conteneur global
    if sorties[idx]:  # dict non vide
        raise IndexError(f"Pas de temps {idx}: une sortie existe dÃ©jÃ .")
    sorties[idx] = {mapper_Y[k]: sorties_[k] for k in range(len(mapper_Y))}


def traiter_consignes(idx):
    executer_modele_phy(idx)
    calculer_erreur_totale(idx)


def proposer_pilotage(idx, pilote):
    pilote.piloter(idx)


class PilotageLoiDEauTemperature:
    """DÃ©bit circuit chauffage qui suit une consigne et tempÃ©rature sortie V3V loi d'eau (multi segments) par rapport Ã  tempÃ©rature extÃ©rieure.
    Le pilotage est rÃ©alisÃ© en modifiant:
     - m_prim: asservissement pour respect consigne T_sec_out_ref
     - la proportion de m_sec (et m_V3V): respecter la loi d'eau T_ch_in_ref.
     - m_sec et m_V3V (Ã  ratio constant): respecter de la consigne m_ch_ref. A tout moment, le dÃ©bit chauffage m_ch vÃ©rifie m_sec + m_V3V. 

     
     Si m_ch variable, le dÃ©lai de propagation est variable.
     Le dÃ©lai de propagation induit un dÃ©calage entre puissance consigne et puissance satisfaite car le pilotage n'est pas anticipateur (demande reflÃ©tÃ©e par la loi d'eau, exploitÃ©e en t pour produire les consignes en t)
    """


    def __init__(self):
        T_air = getP_Radiateurs_T_air()   # tempÃ©rature de l'air intÃ©rieur Ã©metteurs chauffage: 
                                          # si l'eau entre Ã  cette tempÃ©rature aucune demande n'est satisfaite, Ã©quivalent Ã  un dÃ©bit nul
        self.T_ch_in_ref = creer_loi_d_eau((-15, 110), (-5, 85), (15, 30), (16, T_air))(T_ext)  # consigne de tempÃ©rature de sortie de V3V, i.e. circuit chauffage
        
        # [Â°C]  tempÃ©rature de l'eau sortie sec SST:  dÃ©pend de T_ch_in_ref
        self.T_sec_out_ref = np.full(len(T_prim_in), 112)
                                       # np.minimum(np.maximum(self.T_ch_in_ref+5,                                 # fixme: Ã  corriger dans "chauffage_seul"
                                       #            np.full(len(T_prim_in), T_ECS_in_ref+10)),
                                       #            T_prim_in +5)

        self.m_ch_ref = creer_loi_d_eau((-15, 0.175), (15, 0.175), (16, 0))(T_ext)                        # [kg/s] dÃ©bit circuit chauffage 
        self.T_ECS_in_ref = 60                                     
        self.T_out_ECS_ref = 53
        self.dm = 0.0025         # [kg/s] variation Ã©lÃ©mentaire de dÃ©bit pour correction 
        self.T_ch_in = 0        # [Â°C] tempÃ©rature de sortie V3V du pdt prÃ©cÃ©dent 
        # self.debit_primaire = {}
        # self.decharge_stockage = {}
        # self.etat = {}

    def piloter(self, idx):

        m_ECS_prim_ = 0.15
        m_ECS_stock_max_charge    = 0.1    
        m_ECS_stock_max_decharge =  0.1
        m_ECS_stock_charge_init  =  0.01 * m_ECS_stock_max_charge
        m_ECS_stock_decharge_init = 0.01 * m_ECS_stock_max_decharge

        entrees[idx]['T_prim_in'] = T_prim_in[idx]
        entrees[idx]['m_ECS_sout'] =  0.2 # m_sout_ref[idx] # 0.1 * (np.sin(idx/(len(self.T_ch_in_ref)) * 2 * np.pi) + 1) / 2 + 0.05 # 0.25
        # print(entrees[idx]['m_ECS_sout'])
        entrees[idx]['T_edv'] = 10
        entrees[idx]['m_ECS'] = 0.38        # fixme: temporaire
        

        
        if idx == 0:                            # pas d'historique de mesure des tempÃ©ratures, donc supposition de dÃ©bits 
            entrees[idx]['m_ch_dir'] = self.m_ch_ref[idx] / 2
            entrees[idx]['m_ch_V3V'] = self.m_ch_ref[idx] / 2
            entrees[idx]['m_ECS_stock'] = m_ECS_stock_max_charge
            entrees[idx]['m_ECS_dir'] = m_ECS_prim_ / 2 + entrees[idx]['m_ECS_stock']
            entrees[idx]['m_ECS_V3V'] = m_ECS_prim_ / 2
            entrees[idx]['m_prim'] = 2
            entrees[idx]['m_ECS_sec'] = 0.01
            self.statut_charge = 'oui'
            self.statut_decharge = 'non'
            # self.decharge_stockage[idx] = True
            # self.debit_primaire[idx] = False



        else:
            #### chauffage
            if self.m_ch_ref[idx] == 0:    # absence de demande supposÃ©e, dÃ©bit nul
                entrees[idx]['m_ch_dir'] = 0
                entrees[idx]['m_ch_V3V'] = 0

            elif self.m_ch_ref[idx-1] == 0: # en t, demande existante supposÃ©e, mais pas en t-1,
                                                         # donc les mesures du pdt prÃ©cÃ©dent (t-1) sont erronÃ©es pour prÃ©voir ce pdt (t). 
                                                         # On suppose un fort dÃ©bit m_V3V car
                                                         # ces conditions correspondent souvent Ã  l'Ã©tÃ© oÃ¹ la demande est faible
                entrees[idx]['m_ch_dir'] = self.m_ch_ref[idx] * 0.2
                entrees[idx]['m_ch_V3V'] = self.m_ch_ref[idx] * 0.8

            else:                     

                # rÃ©glage dÃ©part chauffage               # cas gÃ©nÃ©ral
                self.T_ch_in = (entrees[idx-1]['m_ch_dir']*sorties[idx-1]['T_sec_out'] + entrees[idx-1]['m_ch_V3V']*sorties[idx-1]['T_ch_out'])/self.m_ch_ref[idx-1] 
                if self.T_ch_in < self.T_ch_in_ref[idx]:
                    dm_ = min(entrees[idx-1]['m_ch_V3V'], self.dm)       # on ne peut soustraire plus de dÃ©bit que ce qui est disponible
                    entrees[idx]['m_ch_dir'] = entrees[idx-1]['m_ch_dir'] + dm_       # tempÃ©rature trop faible, un peu plus d'eau chaude
                    entrees[idx]['m_ch_V3V'] = entrees[idx-1]['m_ch_V3V'] - dm_     
                else:
                    dm_ = min(entrees[idx-1]['m_ch_dir'], self.dm)
                    entrees[idx]['m_ch_dir'] = entrees[idx-1]['m_ch_dir'] - dm_        # tempÃ©rature trop Ã©levÃ©e, un peu moins d'eau chaude
                    entrees[idx]['m_ch_V3V'] = entrees[idx-1]['m_ch_V3V'] + dm_

            # mise Ã  l'Ã©chelle des dÃ©bits chauffage
            if (entrees[idx]['m_ch_dir']+entrees[idx]['m_ch_V3V']) != 0:
                ratio_m_ch = self.m_ch_ref[idx] / (entrees[idx]['m_ch_dir']+entrees[idx]['m_ch_V3V'])      # mise Ã  l'Ã©chelle des dÃ©bits pour respect consigne
                entrees[idx]['m_ch_dir'] *= ratio_m_ch
                entrees[idx]['m_ch_V3V'] *= ratio_m_ch
class PilotageECSDeciles:
    def __init__(self, m_ECS_sout, demand_deciles, T_ballon_seuil=65, T_in_ECS_ref=60, T_out_ECS_ref=53,
                 m_ECS_stock_max=0.1, m_ECS_bouc_min=0.01,m_ECS_bouc_max = 0.1, m_ECS_dir_init=0.2, m_ECS_V3V_init=0.2):
        self.T_ballon_seuil = T_ballon_seuil
        self.T_in_ECS_ref = T_in_ECS_ref
        self.T_out_ECS_ref = T_out_ECS_ref
        self.m_ECS_stock_max = m_ECS_stock_max
        self.m_ECS_bouc_min = m_ECS_bouc_min
        self.m_ECS_bouc_max = m_ECS_bouc_max
        self.m_ECS_sout = m_ECS_sout
        self.seuils = demand_deciles
        self.phase_charge_ballon = True
        self.dm = 0.0025
        self.m_ECS_dir_init = m_ECS_dir_init
        self.m_ECS_V3V_init = m_ECS_V3V_init

    def decile_demande(self, m_ECS_sout):
        if m_ECS_sout <= self.seuils[1]:
            return 0  # faible
        elif  m_ECS_sout <= self.seuils[2]:
            return 1  # moyenne
        else:
            return 2  # forte

    def piloter(self, idx):
        global entrees, sorties
        sout = self.m_ECS_sout[idx]
        dm = self.dm
        T_ballon = sorties[idx-1]['T_ballon_out'] if idx > 0 else self.T_ballon_seuil+1
        T_in_ECS = sorties[idx-1]['T_ECS_in'] if idx > 0 else self.T_in_ECS_ref
        T_out_ECS = sorties[idx-1]['T_ECS_out'] if idx > 0 else self.T_out_ECS_ref
        demande = self.decile_demande(sout)

        # === PHASE DE RECHARGE DU BALLON ===
        if (idx == 0) or self.phase_charge_ballon or (T_ballon < self.T_ballon_seuil):
            entrees[idx]['m_ECS_stock'] = - self.m_ECS_stock_max
            entrees[idx]['m_ECS_bouc'] = self.m_ECS_bouc_min
            entrees[idx]['m_ECS_sec'] =  - self.m_ECS_stock_max + self.m_ECS_bouc_min
            # Initialisation de m_ECS_dir et m_ECS_V3V
            entrees[idx]['m_ECS_dir'] = 0.5 * self.m_ECS_dir_init
            entrees[idx]['m_ECS_V3V'] = 0.5 * self.m_ECS_V3V_init
            # On sort de la phase de charge si le ballon a atteint la tempÃ©rature seuil
            self.phase_charge_ballon = T_ballon < self.T_ballon_seuil
            return

        # === PILOTAGE EN FONCTION DE LA DEMANDE (hors recharge) ===
        # Dans tous les cas, m_ECS_dir et m_ECS_V3V sont initialisÃ©s si on vient de sortir de la phase de charge
        if idx == 1:  # Juste aprÃ¨s l'initialisation
            entrees[idx]['m_ECS_dir'] = 0.5 * self.m_ECS_dir_init
            entrees[idx]['m_ECS_V3V'] = 0.5 * self.m_ECS_V3V_init

        else:
            # On rÃ©cupÃ¨re les valeurs prÃ©cÃ©dentes
            m_dir_prev = entrees[idx-1].get('m_ECS_dir', self.m_ECS_dir_init)
            m_V3V_prev = entrees[idx-1].get('m_ECS_V3V', self.m_ECS_V3V_init)
            # Ajustement selon la tempÃ©rature de sortie ECS
            if T_out_ECS < self.T_out_ECS_ref:
                dm_ = min(m_V3V_prev, dm)
                # On augmente la proportion de m_ECS_dir, on diminue m_ECS_V3V
                entrees[idx]['m_ECS_dir'] = m_dir_prev + dm_
                entrees[idx]['m_ECS_V3V'] = m_V3V_prev - dm_
            else:
                dm_ = min(m_dir_prev, dm)
                # On diminue m_ECS_dir, on augmente m_ECS_V3V
                entrees[idx]['m_ECS_dir'] = m_dir_prev - dm_
                entrees[idx]['m_ECS_V3V'] = m_V3V_prev + dm_

            # On s'assure que les valeurs restent positives et bornÃ©es
            entrees[idx]['m_ECS_dir'] = max(0, entrees[idx]['m_ECS_dir'])
            entrees[idx]['m_ECS_V3V'] = max(0, entrees[idx]['m_ECS_V3V'])

        # Le reste de la logique de pilotage (stockage, bouclage) reste selon ta logique
        if demande == 0:  # FAIBLE
            entrees[idx]['m_ECS_stock'] = self.m_ECS_bouc_max
            entrees[idx]['m_ECS_sec'] = 0
            entrees[idx]['m_ECS_bouc'] = self.m_ECS_bouc_max

        elif demande == 1:  # MOYENNE
            entrees[idx]['m_ECS_bouc'] = self.m_ECS_bouc_max
            entrees[idx]['m_ECS_sec'] = 0
            entrees[idx]['m_ECS_stock'] = self.m_ECS_bouc_max + self.m_ECS_sout

        else:  # demande == 2 : FORTE
            m_total = self.m_ECS_sout + self.m_ECS_bouc_min
            ratio_sec = 0.6
            ratio_stock = 0.4
            if T_in_ECS < self.T_in_ECS_ref:
                ratio_sec = 0.8
                ratio_stock = 0.2
            cible_sec = ratio_sec * m_total
            cible_stock = ratio_stock * m_total
            entrees[idx]['m_ECS_sec'] = cible_sec
            entrees[idx]['m_ECS_stock'] = cible_stock
            entrees[idx]['m_ECS_bouc'] = self.m_ECS_bouc_min
# 3. RÃ©glage sortie de l'Ã©changeur ECS
        if sorties[idx-1]['T_out_ECS'] < self.T_out_ECS_ref:
                # Augmenter m_ECS_prim (ouvrir davantage la vanne vers m_ECS_dir)
            dm_dir = min(dm, sorties[idx-1].get('m_ECS_dir', 0.0) + dm)
            entrees[idx]['m_ECS_dir'] = sorties[idx-1].get('m_ECS_dir', 0.0) + dm_dir
            entrees[idx]['m_ECS_V3V'] = max(sorties[idx-1].get('m_ECS_V3V', 0.0) - dm_dir, 0)
        else:
                # Ouvrir davantage la vanne vers m_ECS_V3V
            dm_V3V = min(dm, sorties[idx-1].get('m_ECS_V3V', 0.0) + dm)
            entrees[idx]['m_ECS_dir'] = max(sorties[idx-1].get('m_ECS_dir', 0.0) - dm_V3V, 0)
            entrees[idx]['m_ECS_V3V'] = sorties[idx-1].get('m_ECS_V3V', 0.0) + dm_V3V

        # 4. RÃ©glage du primaire pour le chauffage seul (identique Ã  avant)
        if (entrees[idx]['m_ch_dir'] + entrees[idx]['m_ECS_dir']) != 0:
            if sorties[idx-1]['T_sec_out'] < self.T_sec_out_ref[idx]:
                dm_ = self.dm
                entrees[idx]['m_prim'] = entrees[idx-1]['m_prim'] + dm_
            else:
                dm_ = min(entrees[idx-1]['m_prim'], self.dm)
                entrees[idx]['m_prim'] = entrees[idx-1]['m_prim'] - dm_
        else:
            entrees[idx]['m_prim'] = 0
    
       

def piloter():

    initialize(time_step) 

    pilote = PilotageLoiDEauTemperature()

    for idx in tqdm.tqdm(range(nbr_ts)): #, miniters=5000):
        entrees[idx] = {}
        sorties[idx] = {}
        erreurs[idx] = {}
        proposer_pilotage(idx, pilote)
        traiter_consignes(idx)   

def posttraiter(plot=True):
    global entrees, sorties, erreurs
    entrees = pd.DataFrame.from_dict(entrees, orient='index')
    entrees.index = index_
    entrees = entrees.sort_index()          # pour que le 1er janvier soit bien au dÃ©but
    entrees.columns = [f'{c} (in)' for c in entrees.columns]


    sorties = pd.DataFrame.from_dict(sorties, orient='index')
    l1 = f"P_chauffage_ref (coef={coefs[0]})"
    sorties[l1] = P_ch_ref
    l2 = f"T_prim_out_ref (coef={coefs[1]})"
    sorties[l2] = T_prim_out_ref
    l3 = f"T_ECS_in_ref (coef={coefs[2]})"
    sorties[l3] = T_ECS_in_ref
    l4 = f"T_out_ECS_ref (coef={coefs[3]})"
    sorties[l4] = T_out_ECS_ref
    sorties.index = index_
    sorties = sorties.sort_index()          # pour que le 1er janvier soit bien au dÃ©but
    erreurs = pd.DataFrame.from_dict(erreurs, orient='index')
    erreurs.index = index_
    erreurs = erreurs.sort_index()          # pour que le 1er janvier soit bien au dÃ©but

    print(f'Reference - demande       : L_moyen: {erreurs.loc[:,'erreur1'].mean():.3f}')
    print(f'Reference - tempÃ©rature   : L_moyen: {erreurs.loc[:,'erreur2'].mean():.3f}')
    print(f'Reference - tempÃ©rature endtree ECS  : L_moyen: {erreurs.loc[:,'erreur3'].mean():.3f}')
    print(f'Reference - tempÃ©rature de sortie ECS  : L_moyen: {erreurs.loc[:,'erreur4'].mean():.3f}')
    # print(sorties.iloc[1000].T)
    # print(entrees.iloc[1000].T)

    # Nettoyage si besoin
 
    slice_ = slice(None)

    # sorties
    # erreurs
    if plot:
        sr = erreurs.iloc[slice_, 2]
        ax = sr.plot()
        ax.set_ylim((0, 1))
        ax = pd.Series(sr.sort_values().values, index=sr.index).plot(title='Erreur de pilotage', color='red', secondary_y=True, figsize=(16, 9))
        ax.set_yscale('log')
        fig = ax.get_figure()
        fig.canvas.manager.set_window_title('Erreurs')
        fig.tight_layout()

    # sorties
    if plot:
        # 1. ECS stockage
        vars = ['T_ECS_1', 'T_ballon_out']
        axes = sorties.iloc[slice_][vars].plot(
            subplots=True,
            cmap='Set1',
            layout=(2, 1),
            figsize=(16, 9)
        )
    if isinstance(axes, np.ndarray):
        axes = axes.flatten()   
    else:
        axes = [axes]
        axes = [ax for ax in axes if ax is not None]
    if axes is not  None and len(axes)>0 :
        axes[0].set_ylim((0, 120))
        entrees.iloc[slice_][['m_ECS_stock (in)', 'm_ECS_dir (in)']].plot(ax=axes[1])
        fig = axes[0].get_figure()
        fig.canvas.manager.set_window_title('ECS: stockage')
        fig.tight_layout()
        # 2. Chauffage
        vars = ['T_ch_in', 'T_ch_out', 'T_in_emet', 'T_out_emetteur', 'm_ch', 'Q_ch', l1, 'Q_aller', 'Q_retour']
        # Premier groupe
        axes1 = sorties.iloc[slice_][vars[:4]].plot(
            subplots=True, sharex=True, cmap='Set1', figsize=(16, 9)
        )
        # DeuxiÃ¨me groupe
        axes2 = sorties.iloc[slice_][vars[4:]].plot(
            subplots=True, sharex=True, cmap='Set1', figsize=(16, 9)
        )
        entrees.iloc[slice_][['m_ch_dir (in)', 'm_ch_V3V (in)']].plot(ax=axes2[-1])
        fig = axes1[0].get_figure()
        fig.canvas.manager.set_window_title('chauffage')
        fig.tight_layout()
        plt.show()

        # 3. Ãchangeur SST
        vars = ['T_prim_out', l2, 'T_sec_in', 'T_sec_out', 'm_sec', 'Q_ech']
        axes = sorties.iloc[slice_][vars].plot(
            subplots=True, sharex=True, cmap='Set1', figsize=(16, 9)
        )
        entrees.iloc[slice_][['T_prim_in (in)']].plot(ax=axes[0])
        entrees.iloc[slice_][['m_prim (in)']].plot(ax=axes[1])
        fig = axes[0].get_figure()
        fig.canvas.manager.set_window_title('echangeur SST')
        fig.tight_layout()
        plt.show()

        # 4. ECS Ã©changeur
        vars = ['T_ECS_prim_in', 'T_ECS_prim_out', 'T_ECS_sec_in', 'T_ECS_in', 'T_ECS_in', 'm_ECS_prim', 'm_ECS', 'Q_ech_ECS']
        axes = sorties.iloc[slice_][vars].plot(
            subplots=True, sharex=True, cmap='Set1', figsize=(16, 9)
        )
        entrees.iloc[slice_][['m_ECS_V3V (in)']].plot(ax=axes[1])
        fig = axes[0].get_figure()
        fig.canvas.manager.set_window_title('ECS: Ã©changeur')
        fig.tight_layout()
        plt.show()

        # 5. ECS bouclage
        vars = ['T_sout', 'T_ECS_out', 'm_ECS_sout_reel', 'm_ECS_reel', 'm_ECS_bouc', 'Q_ECS_bouc']
        axes = sorties.iloc[slice_][vars].plot(
            subplots=True, sharex=True, cmap='Set1', figsize=(16, 9)
        )
        entrees.iloc[slice_][['T_edv (in)']].plot(ax=axes[0])
        entrees.iloc[slice_][['m_ECS_sout (in)', 'm_ECS (in)']].plot(ax=axes[1])
        fig = axes[0].get_figure()
        fig.canvas.manager.set_window_title('ECS: bouclage')
        fig.tight_layout()
        plt.show()
        # entrees 
        fig, axes = plt.subplots(4, 1, sharex=True, figsize=(16, 9))
        entrees.iloc[24*12:][['m_ch_dir (in)', 'm_ch_V3V (in)']].plot(ax=axes[0], title='m_ch_dir & m_ch_V3V')
        entrees.iloc[24*12:][['m_ECS_dir (in)', 'm_ECS_V3V (in)', 'm_ECS_stoc (in)', 'm_ECS (in)', 'm_ECS_sout (in)']].plot(ax=axes[1], title='m_ECS*')
        entrees.iloc[24*12:][['T_prim_in (in)', 'T_edv (in)']].plot(ax=axes[2], title='T_prim_in & T_edv')
        axes[3].axis('off')
        fig.suptitle('EntrÃ©es')
        fig.tight_layout()

        # <--- Ajoute plt.show() ici une seule fois Ã  la fin
        plt.show()




if __name__ == '__main__':
    entrees = {}
    sorties = {}
    erreurs = {}
    piloter()   
    posttraiter(True)

## tentative de calage de modele (pilotage temperature loi d'eau, dÃ©bit fixe)
# recherche du dÃ©bit qui minimise l'erreur annuelle

# def fun(m):
#     m = m[0]
#     global entrees, sorties, erreurs
#     entrees = {}
#     sorties = {}
#     erreurs = {}
#     PilotageLoiDEauTemperature.m_ch_ref = m
#     piloter()   
#     posttraiter(plot=False)

#     print(PilotageLoiDEauTemperature.m_ch_ref)
#     erreur1 = erreurs.loc[:,'erreur1'].mean()
#     return erreur1


# from scipy.optimize import minimize
# res = minimize(fun, [0.12], bounds=[(0.1, 1)], method='Powell')
# print(res)



## tentative de calage de modele (pilotage temperature loi d'eau, dÃ©bit fixe)
# connaissant une puissance et la tempÃ©rature de l'eau correspondante, on cherche le dÃ©bit Ã  faire circuler pour satisfaire cette puissance
# fait intervenir le DT_lm et une recherche de zero/minimum

# idx = 350000
# T_ch_in = PilotageLoiDEauTemperature.T_ch_in_loi_deau[idx]
# T_air = PilotageLoiDEauTemperature.T_air
# Cp = 4180
# S = getP_Radiateurs_S()
# Kg = getP_Radiateurs_U()
# P_ = P_ch[idx]
# print(P_, T_ch_in)
# def fun(m):
#     T_ch_out = max(T_ch_in - P_ /(m*Cp), T_air+0.1)
#     return (P_ - S * Kg * ((T_ch_in-T_air)-(T_ch_out-T_air)) / np.log((T_ch_in-T_air)/(T_ch_out-T_air)))**2

# from scipy.optimize import minimize
# res = minimize(fun, 0.3, bounds=[(0, None)])
# print(res)




















####
#  brouillon: ne pas utiliser
###
# figure: erreur (signÃ©e) en fonction de la tempÃ©rature extÃ©rieure
# attention: Ã©tendue y modifiÃ©e
# l1 = f"P_chauffage_ref (coef=1)"
# P_ch = "P_chauffage"
# sr=((sorties[l1]-sorties[P_ch])/(sorties[l1]+1))
# sr = np.sign(sr) * (sr**2)
# sr = pd.Series(sr, index=index_, name="erreur (signe)").sort_index()
# T_ext_=pd.Series(T_ext, index=index_, name="T_ext").sort_index()
# df = pd.concat([sorties, erreurs, T_ext_, sr], axis=1)
# df.plot.scatter(x="T_ext", y="erreur (signe)", ylim=(-2,2), s=1, title='reference-observe')
